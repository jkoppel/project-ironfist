#include "overlay_xml.h"
#include "adventure/map.h"
#include "gui/dialog.h"
#include "overlay.h"
#include "xml/utils_xml.h"

using namespace UtilsXML;

void ReadOverlay(tinyxml2::XMLElement* root, int idx) {
  std::map<std::string, int> StrToTileset = {
    {"TILESET_UNKNOWN", 0},
    {"TILESET_HAUNTED", TILESET_HAUNTED},
    {"TILESET_ARTIFACT",TILESET_ARTIFACT},
    {"TILESET_MONSTER",TILESET_MONSTER},
    {"TILESET_ARTIFACT_TAKEN",TILESET_ARTIFACT_TAKEN},
    {"TILESET_FLAG",TILESET_FLAG},
    {"TILESET_RESOURCE_DISPLAY",TILESET_RESOURCE_DISPLAY},
    {"TILESET_HOURGLASS",TILESET_HOURGLASS},
    {"TILESET_ROUTE",TILESET_ROUTE},
    {"TILESET_STONBACK",TILESET_STONBACK},
    {"TILESET_MONSTER_ANIMATION",TILESET_MONSTER_ANIMATION},
    {"TILESET_HERO",TILESET_HERO},
    {"TILESET_SNOW_MOUNTAIN",TILESET_SNOW_MOUNTAIN},
    {"TILESET_SWAMP_MOUNTAIN",TILESET_SWAMP_MOUNTAIN},
    {"TILESET_LAVA_MOUNTAIN",TILESET_LAVA_MOUNTAIN},
    {"TILESET_DESERT_MOUNTAIN",TILESET_DESERT_MOUNTAIN},
    {"TILESET_DIRT_MOUNTAIN",TILESET_DIRT_MOUNTAIN},
    {"TILESET_MOUNTAIN_MULTIPLE",TILESET_MOUNTAIN_MULTIPLE},
    {"TILESET_EXTRA_OVERLAY",TILESET_EXTRA_OVERLAY},
    {"TILESET_ROAD",TILESET_ROAD},
    {"TILESET_MOUNTAIN_CRACKED",TILESET_MOUNTAIN_CRACKED},
    {"TILESET_MOUNTAIN_GRASS",TILESET_MOUNTAIN_GRASS},
    {"TILESET_TREE_JUNGLE",TILESET_TREE_JUNGLE},
    {"TILESET_TREE_EVIL",TILESET_TREE_EVIL},
    {"TILESET_OBJ_TOWN",TILESET_OBJ_TOWN},
    {"TILESET_TOWN_TERRAIN",TILESET_TOWN_TERRAIN},
    {"TILESET_TOWN_SHADOW",TILESET_TOWN_SHADOW},
    {"TILESET_TOWN_RANDOM",TILESET_TOWN_RANDOM},
    {"TILESET_OBJECT_EXTRA",TILESET_OBJECT_EXTRA},
    {"TILESET_OBJECT_WATER_2",TILESET_OBJECT_WATER_2},
    {"TILESET_OBJECT_MULTIPLE_2",TILESET_OBJECT_MULTIPLE_2},
    {"TILESET_OBJECT_TREE_SNOW",TILESET_OBJECT_TREE_SNOW},
    {"TILESET_OBJECT_TREE_FIR",TILESET_OBJECT_TREE_FIR},
    {"TILESET_OBJECT_TREE_FALL",TILESET_OBJECT_TREE_FALL},
    {"TILESET_OBJECT_STREAM",TILESET_OBJECT_STREAM},
    {"TILESET_OBJECT_RESOURCE",TILESET_OBJECT_RESOURCE},
    {"TILESET_OBJECT_DUMMY",TILESET_OBJECT_DUMMY},
    {"TILESET_OBJECT_GRASS_2",TILESET_OBJECT_GRASS_2},
    {"TILESET_OBJECT_TREE_DECIDUOUS",TILESET_OBJECT_TREE_DECIDUOUS},
    {"TILESET_OBJECT_WATER",TILESET_OBJECT_WATER},
    {"TILESET_OBJECT_GRASS",TILESET_OBJECT_GRASS},
    {"TILESET_OBJECT_SNOW",TILESET_OBJECT_SNOW},
    {"TILESET_OBJECT_SWAMP",TILESET_OBJECT_SWAMP},
    {"TILESET_OBJECT_LAVA",TILESET_OBJECT_LAVA},
    {"TILESET_OBJECT_DESERT",TILESET_OBJECT_DESERT},
    {"TILESET_OBJECT_DIRT",TILESET_OBJECT_DIRT},
    {"TILESET_OBJECT_CRACKED",TILESET_OBJECT_CRACKED},
    {"TILESET_OBJECT_LAVA_3",TILESET_OBJECT_LAVA_3},
    {"TILESET_OBJECT_MULTIPLE",TILESET_OBJECT_MULTIPLE},
    {"TILESET_OBJECT_LAVA_2",TILESET_OBJECT_LAVA_2},
    {"TILESET_OBJECT_EXPANSION_1",TILESET_OBJECT_EXPANSION_1},
    {"TILESET_OBJECT_EXPANSION_2",TILESET_OBJECT_EXPANSION_2},
    {"TILESET_OBJECT_EXPANSION_3",TILESET_OBJECT_EXPANSION_3}
  };
  std::map<std::string, int> StrToLocationType = {
    {"LOCATION_ALCHEMIST_LAB",LOCATION_ALCHEMIST_LAB},
    {"LOCATION_SIGN",LOCATION_SIGN},
    {"LOCATION_BUOY",LOCATION_BUOY},
    {"LOCATION_SKELETON",LOCATION_SKELETON},
    {"LOCATION_DAEMON_CAVE",LOCATION_DAEMON_CAVE},
    {"LOCATION_TREASURE_CHEST",LOCATION_TREASURE_CHEST},
    {"LOCATION_FAERIE_RING",LOCATION_FAERIE_RING},
    {"LOCATION_CAMPFIRE",LOCATION_CAMPFIRE},
    {"LOCATION_FOUNTAIN",LOCATION_FOUNTAIN},
    {"LOCATION_GAZEBO",LOCATION_GAZEBO},
    {"LOCATION_ANCIENT_LAMP",LOCATION_ANCIENT_LAMP},
    {"LOCATION_GRAVEYARD",LOCATION_GRAVEYARD},
    {"LOCATION_ARCHERS_HOUSE",LOCATION_ARCHERS_HOUSE},
    {"LOCATION_GOBLIN_HUT",LOCATION_GOBLIN_HUT},
    {"LOCATION_DWARF_COTTAGE",LOCATION_DWARF_COTTAGE},
    {"LOCATION_PEASANT_HUT",LOCATION_PEASANT_HUT},
    {"LOCATION_LOG_CABIN",LOCATION_LOG_CABIN},
    {"LOCATION_ROAD",LOCATION_ROAD},
    {"LOCATION_EVENT",LOCATION_EVENT},
    {"LOCATION_DRAGON_CITY",LOCATION_DRAGON_CITY},
    {"LOCATION_LIGHTHOUSE",LOCATION_LIGHTHOUSE},
    {"LOCATION_WATERWHEEL",LOCATION_WATERWHEEL},
    {"LOCATION_MINE",LOCATION_MINE},
    {"LOCATION_ARMY_CAMP",LOCATION_ARMY_CAMP},
    {"LOCATION_OBELISK",LOCATION_OBELISK},
    {"LOCATION_OASIS",LOCATION_OASIS},
    {"LOCATION_RESOURCE",LOCATION_RESOURCE},
    {"LOCATION_SAWMILL",LOCATION_SAWMILL},
    {"LOCATION_ORACLE",LOCATION_ORACLE},
    {"LOCATION_SHRINE_FIRST",LOCATION_SHRINE_FIRST_ORDER},
    {"LOCATION_SHIPWRECK",LOCATION_SHIPWRECK},
    {"LOCATION_SEA_CHEST",LOCATION_SEA_CHEST},
    {"LOCATION_DESRT_TENT",LOCATION_DESERT_TENT},
    {"LOCATION_TOWN",LOCATION_TOWN},
    {"LOCATION_STONE_LITHS",LOCATION_STONE_LITHS},
    {"LOCATION_WAGON_CAMP",LOCATION_WAGON_CAMP},
    {"LOCATION_WELL",LOCATION_WELL},
    {"LOCATION_WHIRLPOOL",LOCATION_WHIRLPOOL},
    {"LOCATION_WINDMILL",LOCATION_WINDMILL},
    {"LOCATION_ARTIFACT",LOCATION_ARTIFACT},
    {"LOCATION_HERO",LOCATION_HERO},
    {"LOCATION_BOAT",LOCATION_BOAT},
    {"LOCATION_ULTIMATE_ARTIFACT",LOCATION_ULTIMATE_ARTIFACT},
    {"LOCATION_RANDOM_ARTIFACT",LOCATION_RANDOM_ARTIFACT},
    {"LOCATION_RANDOM_RESOURCE",LOCATION_RANDOM_RESOURCE},
    {"LOCATION_RANDOM_MONSTER",LOCATION_RANDOM_MONSTER},
    {"LOCATION_RANDOM_TOWN",LOCATION_RANDOM_TOWN},
    {"LOCATION_RANDOM_CASTLE",LOCATION_RANDOM_CASTLE},
    {"LOCATION_RANDOM_MONSTER_WEAK",LOCATION_RANDOM_MONSTER_WEAK},
    {"LOCATION_RANDOM_MONSTER_MEDIUM",LOCATION_RANDOM_MONSTER_MEDIUM},
    {"LOCATION_RANDOM_MONSTER_STRONG",LOCATION_RANDOM_MONSTER_STRONG},
    {"LOCATION_RANDOM_MONSTER_VERY_STRONG",LOCATION_RANDOM_MONSTER_VERY_STRONG},
    {"LOCATION_RANDOM_HERO",LOCATION_RANDOM_HERO},
    {"LOCATION_NOTHING_SPECIAL",LOCATION_NOTHING_SPECIAL},
    {"LOCATION_HOLE_LIKE", LOCATION_HOLE_LIKE},
    {"LOCATION_WATCH_TOWER",LOCATION_WATCH_TOWER},
    {"LOCATION_TREE_HOUSE",LOCATION_TREE_HOUSE},
    {"LOCATION_TREE_CITY",LOCATION_TREE_CITY},
    {"LOCATION_RUINS",LOCATION_RUINS},
    {"LOCATION_FORT",LOCATION_FORT},
    {"LOCATION_TRADING_POST",LOCATION_TRADING_POST},
    {"LOCATION_ABANDONED_MINE",LOCATION_ABANDONED_MINE},
    {"LOCATION_DWARF_CABIN",LOCATION_DWARF_CABIN},
    {"LOCATION_STANDING_STONES",LOCATION_STANDING_STONES},
    {"LOCATION_IDOL",LOCATION_IDOL},
    {"LOCATION_TREE_OF_KNOWLEDGE",LOCATION_TREE_OF_KNOWLEDGE},
    {"LOCATION_WITCH_DOCTORS_HUT",LOCATION_WITCH_DOCTORS_HUT},
    {"LOCATION_TEMPLE",LOCATION_TEMPLE},
    {"LOCATION_HILL_FORT",LOCATION_HILL_FORT},
    {"LOCATION_HALFLING_HOLE",LOCATION_HALFLING_HOLE},
    {"LOCATION_MERCENARY_CAMP",LOCATION_MERCENARY_CAMP},
    {"LOCATION_SHRINE_SECOND_ORDER",LOCATION_SHRINE_SECOND_ORDER},
    {"LOCATION_SHRINE_THIRD_ORDER",LOCATION_SHRINE_THIRD_ORDER},
    {"LOCATION_PYRAMID",LOCATION_PYRAMID},
    {"LOCATION_CITY_OF_DEAD",LOCATION_CITY_OF_DEAD},
    {"LOCATION_EXCAVATION",LOCATION_EXCAVATION},
    {"LOCATION_SPHINX",LOCATION_SPHINX},
    {"LOCATION_WAGON",LOCATION_WAGON},
    {"LOCATION_TAR_PIT",LOCATION_TAR_PIT},
    {"LOCATION_ARTESIAN_SPRING",LOCATION_ARTESIAN_SPRING},
    {"LOCATION_TROLL_BRIDGE",LOCATION_TROLL_BRIDGE},
    {"LOCATION_WATERING_HOLE",LOCATION_WATERING_HOLE},
    {"LOCATION_WITCH_HUT",LOCATION_WITCH_HUT},
    {"LOCATION_XANADU",LOCATION_XANADU},
    {"LOCATION_CAVE",LOCATION_CAVE},
    {"LOCATION_LEAN_TO",LOCATION_LEAN_TO},
    {"LOCATION_MAGELLANS_MAPS",LOCATION_MAGELLANS_MAPS},
    {"LOCATION_FLOTSAM",LOCATION_FLOTSAM},
    {"LOCATION_DERELICT_SHIP",LOCATION_DERELICT_SHIP},
    {"LOCATION_SHIPWRECK_SURVIVOR",LOCATION_SHIPWRECK_SURVIVOR},
    {"LOCATION_BOTTLE",LOCATION_BOTTLE},
    {"LOCATION_MAGIC_WELL",LOCATION_MAGIC_WELL},
    {"LOCATION_MAGIC_GARDEN",LOCATION_MAGIC_GARDEN},
    {"LOCATION_OBSERVATION_TOWER",LOCATION_OBSERVATION_TOWER},
    {"LOCATION_FREEMANS_FOUNDRY",LOCATION_FREEMANS_FOUNDRY},
    {"LOCATION_STREAM",LOCATION_STREAM},
    {"LOCATION_TREES",LOCATION_TREES},
    {"LOCATION_MOUNTAINS",LOCATION_MOUNTAINS},
    {"LOCATION_VOLCANO",LOCATION_VOLCANO},
    {"LOCATION_FLOWERS",LOCATION_FLOWERS},
    {"LOCATION_ROCK",LOCATION_ROCK},
    {"LOCATION_LAKE",LOCATION_LAKE},
    {"LOCATION_MANDRAKE",LOCATION_MANDRAKE},
    {"LOCATION_DEAD_TREE",LOCATION_DEAD_TREE},
    {"LOCATION_STUMP",LOCATION_STUMP},
    {"LOCATION_CRATER",LOCATION_CRATER},
    {"LOCATION_CACTUS",LOCATION_CACTUS},
    {"LOCATION_MOUND",LOCATION_MOUND},
    {"LOCATION_DUNE",LOCATION_DUNE},
    {"LOCATION_LAVA_POOL",LOCATION_LAVA_POOL},
    {"LOCATION_SHRUB",LOCATION_SHRUB},
    {"LOCATION_HOLE",LOCATION_HOLE},
    {"LOCATION_OUTCROPPING",LOCATION_OUTCROPPING},
    {"LOCATION_RANDOM_ARTIFACT_TREASURE",LOCATION_RANDOM_ARTIFACT_TREASURE},
    {"LOCATION_RANDOM_ARTIFACT_MINOR",LOCATION_RANDOM_ARTIFACT_MINOR},
    {"LOCATION_RANDOM_ARTIFACT_MAJOR",LOCATION_RANDOM_ARTIFACT_MAJOR},
    {"LOCATION_BARRIER",LOCATION_BARRIER},
    {"LOCATION_TRAVELLER_TENT",LOCATION_TRAVELLER_TENT},
    {"LOCATION_EXPANSION_DWELLING",LOCATION_EXPANSION_DWELLING},
    {"LOCATION_ALCHEMIST_TOWER",LOCATION_ALCHEMIST_TOWER},
    {"LOCATION_JAIL",LOCATION_JAIL},
    {"LOCATION_SHIPYARD", LOCATION_SHIPYARD},
    {"TILE_HAS_EVENT",TILE_HAS_EVENT}
  };
  std::map<std::string, int> StrToCategory = {
    {"CATEGORY_TERRAIN", OVERLAY_CATEGORY_TERRAIN},
    {"CATEGORY_TREASURE", OVERLAY_CATEGORY_TREASURE},
    {"CATEGORY_CREATURE", OVERLAY_CATEGORY_CREATURE},
    {"CATEGORY_ARTIFACT", OVERLAY_CATEGORY_ARTIFACT},
    {"CATEGORY_TOWN", OVERLAY_CATEGORY_TOWN},
    {"CATEGORY_BUILTIN", OVERLAY_CATEGORY_BUILTIN},
    {"CATEGORY_HERO", OVERLAY_CATEGORY_HERO}
  };

  overlay* over = &gOverlayDatabase[idx];
  over->idx = root->IntAttribute("idx"); 
  over->idx2 = root->IntAttribute("idx2");
  over->ordinal = root->IntAttribute("ordinal");
  over->tileset = StrToTileset[root->Attribute("tileset")];
  over->category = StrToCategory[root->Attribute("category")];
  over->field_10 = root->IntAttribute("animationLength");
  over->locationType = StrToLocationType[root->Attribute("locationType")];
  over->townColorOrMineColor = root->IntAttribute("townColorOrMineColor");
  over->field_E = root->IntAttribute("field_E");
  over->field_4E = root->IntAttribute("field_4E");
  over->field_4B = root->IntAttribute("field_4B");
  over->field_42 = root->IntAttribute("field_42");
  over->field_4D = 8;

  for(tinyxml2::XMLNode* child = root->FirstChild(); child; child = child->NextSibling()) {
    tinyxml2::XMLElement *elem = child->ToElement();
    std::string name = elem->Name();
    if(name == "intersectsTileMask") UtilsXML::ReadMask(elem, &over->intersectsTileMask);
    if(name == "coveredNonObstructedMask") UtilsXML::ReadMask(elem, &over->coveredNonObstructedMask);
    if(name == "shadowsMask") UtilsXML::ReadMask(elem, &over->shadowsMask);
    if(name == "animatedLateOverlay") UtilsXML::ReadMask(elem, &over->animatedLateOverlay);
    if(name == "resourceField") UtilsXML::ReadMask(elem, &over->resourceField);
    if(name == "interactionPointMask") UtilsXML::ReadMask(elem, &over->interactionPointMask);
    if(name == "terrainObjCategoryMask") UtilsXML::ReadBinary(elem, &over->terrainObjCategoryMask);
    if(name == "allowedTerrainPlacementMask") UtilsXML::ReadBinary(elem, &over->allowedTerrainPlacementMask);
  }
}

void ReadOverlayFile(tinyxml2::XMLNode* root) {
  int i = 0;
  for(tinyxml2::XMLNode* child = root->FirstChild(); child; child = child->NextSibling()) {
    tinyxml2::XMLElement *elem = child->ToElement();
    std::string name = elem->Name();
    if(name == "overlay") {
      if(i >= MAX_OVERLAYS) {
        std::string error_message = "Attempting to load more than " + std::to_string(MAX_OVERLAYS) + " overlays. Skipping";
        DisplayError(error_message, "overlays.XML");
        break;
      }
      ReadOverlay(elem, i);
      i++;
    }
  }
  gNumOverlays = i;
}

tinyxml2::XMLError OverlayXML::Read(const char* fileName) {
  tinyxml2::XMLError eResult = tempDoc->LoadFile(fileName);
  if(!eResult) {
    tinyxml2::XMLNode *pRoot = tempDoc->FirstChild();
    ReadOverlayFile(pRoot);
  }
  return eResult;
}