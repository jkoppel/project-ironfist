/*
   This file has been generated by IDA.
   It contains local type definitions from
     C:\Users\jkoppel\Dropbox\H2ReverseEng\EDITOR2W.idb
*/

/*    1 */
enum spellpower_offset
{
  MAX_STACKS = 0x14,
};

/*    2 */
enum COMBAT_CONSTANTS
{
  HEX_GRID_SIZE = 0x75,
};

/*    3 */
enum CREATURE_FLAGS
{
  TWO_HEXER = 0x1,
  FLYER = 0x2,
  SHOOTER = 0x4,
  TWO_HEX_ATTACKER = 0x8,
  DEAD = 0x10,
  HAS_GOOD_MORALE = 0x20,
  RETALIATED = 0x40,
  MAYBE_NOT_LOST_TURN = 0x80,
  MIRROR_IMAGE = 0x100,
  CREATURE_RED = 0x200,
  UNDEAD = 0x400,
  CREATURE_BROWN = 0x2000,
  CREATURE_PETRIFIED = 0x4000,
};

/*    4 */
enum SPECIAL_PALETTE_INDICES
{
  SPECIAL_PALETTE_INDICES_1 = 0xD6,
  SPECIAL_PALETTE_INDICES_2 = 0xF6,
};

/*    5 */
enum CREATURE_EFFECT_ANIMATION_INDEX : __int8
{
  ANIM_NONE_IDX = 0x0,
  ANIM_MAGIC01_IDX = 0x1,
  ANIM_MAGIC02_IDX = 0x2,
  ANIM_MAGIC03_IDX = 0x3,
  ANIM_MAGIC04_IDX = 0x4,
  ANIM_MAGIC05_IDX = 0x5,
  ANIM_MAGIC06_IDX = 0x6,
  ANIM_MAGIC07_IDX = 0x7,
  ANIM_MAGIC08_IDX = 0x8,
  ANIM_RAINBOW_LUCK_IDX = 0x9,
  ANIM_CLOUD_LUCK_IDX = 0xA,
  ANIM_MORALE_GOOD_IDX = 0xB,
  ANIM_MORALE_BAD_IDX = 0xC,
  ANIM_RED_DEATH_IDX = 0xD,
  ANIM_RED_FIRE_IDX = 0xE,
  ANIM_SPARKS_IDX = 0xF,
  ANIM_ELECTRIC_IDX = 0x10,
  ANIM_PHISICAL_IDX = 0x11,
  ANIM_BLUEFIRE_IDX = 0x12,
  ANIM_ICECLOUD_IDX = 0x13,
  ANIM_LICHCLOUD_IDX = 0x14,
  ANIM_BLESS_IDX = 0x15,
  ANIM_BERZERK_IDX = 0x16,
  ANIM_SHIELD_IDX = 0x17,
  ANIM_HASTE_IDX = 0x18,
  ANIM_PARALYZE_IDX = 0x19,
  ANIM_HYPNOTIZE_IDX = 0x1A,
  ANIM_DRAGONSLAYER_IDX = 0x1B,
  ANIM_BLIND_IDX = 0x1C,
  ANIM_CURSE_IDX = 0x1D,
  ANIM_STONESKIN_IDX = 0x1E,
  ANIM_STEELSKIN_IDX = 0x1F,
};

/*    6 */
enum HERO_CONSTANTS
{
  MAX_ARTIFACTS = 0xE,
  MAX_TOTAL_HEROES = 0x30,
};

/*    7 */
enum CREATURES
{
  CREATURE_PEASANT = 0x0,
  CREATURE_ARCHER = 0x1,
  CREATURE_RANGER = 0x2,
  CREATURE_PIKEMAN = 0x3,
  CREATURE_VETERAN_PIKEMAN = 0x4,
  CREATURE_SWORDSMAN = 0x5,
  CREATURE_MASTER_SWORDSMAN = 0x6,
  CREATURE_CAVALRY = 0x7,
  CREATURE_CHAMPION = 0x8,
  CREATURE_PALADIN = 0x9,
  CREATURE_CRUSADER = 0xA,
  CREATURE_GOBLIN = 0xB,
  CREATURE_ORC = 0xC,
  CREATURE_ORC_CHIEF = 0xD,
  CREATURE_WOLF = 0xE,
  CREATURE_OGRE = 0xF,
  CREATURE_OGRE_LORD = 0x10,
  CREATURE_TROLL = 0x11,
  CREATURE_WAR_TROLL = 0x12,
  CREATURE_CYCLOPS = 0x13,
  CREATURE_SPRITE = 0x14,
  CREATURE_DWARF = 0x15,
  CREATURE_BATTLE_DWARF = 0x16,
  CREATURE_ELF = 0x17,
  CREATURE_GRAND_ELF = 0x18,
  CREATURE_DRUID = 0x19,
  CREATURE_GREATER_DRUID = 0x1A,
  CREATURE_UNICORN = 0x1B,
  CREATURE_PHOENIX = 0x1C,
  CREATURE_CENTAUR = 0x1D,
  CREATURE_GARGOYLE = 0x1E,
  CREATURE_GRIFFIN = 0x1F,
  CREATURE_MINOTAUR = 0x20,
  CREATURE_MINOTAUR_KING = 0x21,
  CREATURE_HYDRA = 0x22,
  CREATURE_GREEN_DRAGON = 0x23,
  CREATURE_RED_DRAGON = 0x24,
  CREATURE_BLACK_DRAGON = 0x25,
  CREATURE_HALFLING = 0x26,
  CREATURE_BOAR = 0x27,
  CREATURE_IRON_GOLEM = 0x28,
  CREATURE_STEEL_GOLEM = 0x29,
  CREATURE_ROC = 0x2A,
  CREATURE_MAGE = 0x2B,
  CREATURE_ARCHMAGE = 0x2C,
  CREATURE_GIANT = 0x2D,
  CREATURE_TITAN = 0x2E,
  CREATURE_SKELETON = 0x2F,
  CREATURE_ZOMBIE = 0x30,
  CREATURE_MUTANT_ZOMBIE = 0x31,
  CREATURE_MUMMY = 0x32,
  CREATURE_ROYAL_MUMMY = 0x33,
  CREATURE_VAMPIRE = 0x34,
  CREATURE_VAMPIRE_LORD = 0x35,
  CREATURE_LICH = 0x36,
  CREATURE_POWER_LICH = 0x37,
  CREATURE_BONE_DRAGON = 0x38,
  CREATURE_ROGUE = 0x39,
  CREATURE_NOMAD = 0x3A,
  CREATURE_GHOST = 0x3B,
  CREATURE_GENIE = 0x3C,
  CREATURE_MEDUSA = 0x3D,
  CREATURE_EARTH_ELEMENTAL = 0x3E,
  CREATURE_AIR_ELEMENTAL = 0x3F,
  CREATURE_FIRE_ELEMENTAL = 0x40,
  CREATURE_WATER_ELEMENTAL = 0x41,
};

/*    8 */
enum CREATE_STACK_CONSTANTS
{
  NUM_EFFECTS = 0xF,
};

/*    9 */
enum MACRO_ERROR_CLIENT
{
  ERROR_CLIENT_ALREADY_EXISTS = 0xB7,
  ERROR_NO_MESSAGES = 0x103,
};

/*   10 */
enum MACRO_NULL
{
  NULL = 0x0,
};

/*   11 */
enum MACRO_SEEK
{
  SEEK_SET = 0x0,
  SEEK_CUR = 0x1,
  SEEK_END = 0x2,
  MAX_FILENAME_LENGTH = 0xD,
  MMIO_DEFAULTBUFFER = 0x2000,
};

/*   12 */
enum MACRO_O
{
  O_RDONLY = 0x0,
  O_WRONLY = 0x1,
  O_RDWR = 0x2,
  O_APPEND = 0x8,
  O_CREAT = 0x100,
  O_TRUNC = 0x200,
  O_EXCL = 0x400,
  O_TEXT = 0x4000,
  O_BINARY = 0x8000,
};

/*   13 */
enum MACRO_DRIVERVERSION
{
  DRIVERVERSION = 0x0,
  TECHNOLOGY = 0x2,
  HORZSIZE = 0x4,
  VERTSIZE = 0x6,
  HORZRES = 0x8,
  VERTRES = 0xA,
  BITSPIXEL = 0xC,
  PLANES = 0xE,
  NUMBRUSHES = 0x10,
  NUMPENS = 0x12,
  NUMMARKERS = 0x14,
  NUMFONTS = 0x16,
  NUMCOLORS = 0x18,
  PDEVICESIZE = 0x1A,
  CURVECAPS = 0x1C,
  LINECAPS = 0x1E,
  POLYGONALCAPS = 0x20,
  TEXTCAPS = 0x22,
  CLIPCAPS = 0x24,
  RASTERCAPS = 0x26,
  ASPECTX = 0x28,
  ASPECTY = 0x2A,
  ASPECTXY = 0x2C,
  LOGPIXELSX = 0x58,
  LOGPIXELSY = 0x5A,
  SIZEPALETTE = 0x68,
  NUMRESERVED = 0x6A,
  COLORRES = 0x6C,
  PHYSICALWIDTH = 0x6E,
  PHYSICALHEIGHT = 0x6F,
  PHYSICALOFFSETX = 0x70,
  PHYSICALOFFSETY = 0x71,
  SCALINGFACTORX = 0x72,
  SCALINGFACTORY = 0x73,
  VREFRESH = 0x74,
  DESKTOPVERTRES = 0x75,
  DESKTOPHORZRES = 0x76,
  BLTALIGNMENT = 0x77,
  SHADEBLENDCAPS = 0x78,
  COLORMGMTCAPS = 0x79,
};

/*   14 */
enum MSG_WINDOW_OPTIONS
{
  WITH_OKAY_BUTTON = 0x1,
  WITH_YES_NO_BUTTONS = 0x2,
  WITH_CANCEL_BUTTON = 0x3,
  TRANSIENT_FOR_RIGHT_CLICKS = 0x4,
};

/*   15 */
enum CREATURE_ATTRIBUTES : __int8
{
  ATTR_MIRROR_IMAGE = 0x1,
  ATTR_BLOODLUST_RED = 0x2,
  ATTR_UNDEAD = 0x4,
  ATTR_BROWN = 0x20,
  ATTR_PETRIFY_GRAY = 0x40,
};

/*   16 */
enum Spell
{
  SPELL_FIREBALL = 0x0,
  SPELL_FIREBLAST = 0x1,
  SPELL_LIGHTNING_BOLT = 0x2,
  SPELL_CHAIN_LIGHTNING = 0x3,
  SPELL_TELEPORT = 0x4,
  SPELL_CURE = 0x5,
  SPELL_MASS_CURE = 0x6,
  SPELL_RESURRECT = 0x7,
  SPELL_RESURRECT_TRUE = 0x8,
  SPELL_HASTE = 0x9,
  SPELL_MASS_HASTE = 0xA,
  SPELL_SLOW = 0xB,
  SPELL_MASS_SLOW = 0xC,
  SPELL_BLIND = 0xD,
  SPELL_BLESS = 0xE,
  SPELL_MASS_BLESS = 0xF,
  SPELL_STONESKIN = 0x10,
  SPELL_STEELSKIN = 0x11,
  SPELL_CURSE = 0x12,
  SPELL_MASS_CURSE = 0x13,
  SPELL_HOLY_WORD = 0x14,
  SPELL_HOLY_SHOUT = 0x15,
  SPELL_ANTI_MAGIC = 0x16,
  SPELL_DISPEL_MAGIC = 0x17,
  SPELL_MASS_DISPEL = 0x18,
  SPELL_MAGIC_ARROW = 0x19,
  SPELL_BERZERKER = 0x1A,
  SPELL_ARMAGEDDON = 0x1B,
  SPELL_ELEMENTAL_STORM = 0x1C,
  SPELL_METEOR_SHOWER = 0x1D,
  SPELL_PARALYZE = 0x1E,
  SPELL_HYPNOTIZE = 0x1F,
  SPELL_COLD_RAY = 0x20,
  SPELL_COLD_RING = 0x21,
  SPELL_DISRUPTING_RAY = 0x22,
  SPELL_DEATH_RIPPLE = 0x23,
  SPELL_DEATH_WAVE = 0x24,
  SPELL_DRAGON_SLAYER = 0x25,
  SPELL_BLOOD_LUST = 0x26,
  SPELL_ANIMATE_DEAD = 0x27,
  SPELL_MIRROR_IMAGE = 0x28,
  SPELL_SHIELD = 0x29,
  SPELL_MASS_SHIELD = 0x2A,
  SPELL_SUMMON_EARTH_ELEMENTAL = 0x2B,
  SPELL_SUMMON_AIR_ELEMENTAL = 0x2C,
  SPELL_SUMMON_FIRE_ELEMENTAL = 0x2D,
  SPELL_SUMMON_WATER_ELEMENTAL = 0x2E,
  SPELL_EARTHQUAKE = 0x2F,
  SPELL_VIEW_MINES = 0x30,
  SPELL_VIEW_RESOURCES = 0x31,
  SPELL_VIEW_ARTIFACTS = 0x32,
  SPELL_VIEW_TOWNS = 0x33,
  SPELL_VIEW_HEROES = 0x34,
  SPELL_VIEW_ALL = 0x35,
  SPELL_IDENTIFY = 0x36,
  SPELL_SUMMON_BOAT = 0x37,
  SPELL_DIMENSION_DOOR = 0x38,
  SPELL_TOWN_GATE = 0x39,
  SPELL_TOWN_PORTAL = 0x3A,
  SPELL_VISIONS = 0x3B,
  SPELL_HAUNT = 0x3C,
  SPELL_SET_EARTH_GUARDIAN = 0x3D,
  SPELL_SET_AIR_GUARDIAN = 0x3E,
  SPELL_SET_FIRE_GUARDIAN = 0x3F,
  SPELL_SET_WATER_GUARDIAN = 0x40,
  SPELL_MEDUSA_PETRIFY = 0x65,
  SPELL_ARCHMAGI_DISPEL = 0x66,
  SPELL_NONE = 0xFFFFFFFF,
};

/*   17 */
enum SPELL_ATTRIBUTES
{
  ATTR_COMBAT_SPELL = 0x2,
  ATTR_ADVENTURE_SPELL = 0x4,
  ATTR_DURATIONED_SPELL = 0x8,
};

/*   18 */
enum MACRO_PM
{
  PM_NOREMOVE = 0x0,
  PM_REMOVE = 0x1,
  PM_NOYIELD = 0x2,
};

/*   19 */
enum STACK_MODIFYING_EFFECT
{
  EFFECT_HASTE = 0x0,
  EFFECT_SLOW = 0x1,
  EFFECT_BLIND = 0x2,
  EFFECT_BLESS = 0x3,
  EFFECT_CURSE = 0x4,
  EFFECT_BERSERKER = 0x5,
  EFFECT_PARALYZE = 0x6,
  EFFECT_HYPNOTIZE = 0x7,
  EFFECT_DRAGON_SLAYER = 0x8,
  EFFECT_BLOOD_LUST = 0x9,
  EFFECT_SHIELD = 0xA,
  EFFECT_PETRIFY = 0xB,
  EFFECT_ANTI_MAGIC = 0xC,
  EFFECT_STONESKIN = 0xD,
  EFFECT_STEELSKIN = 0xE,
};

/*   20 */
enum CREATURE_EVENT_CODE
{
  CREATURE_MOVED_CODE = 0x0,
  CREATURE_TOOK_TURN_EVENT_CODE = 0x1,
  CREATURE_TOOK_DAMAGE_CODE = 0x2,
};

/*   21 */
enum CREATURE_COMBAT_SOUNDS
{
  CREATURE_COMBAT_MOVE_SOUND = 0x0,
  CREATURE_COMBAT_ATTACK_SOUND = 0x1,
  CREATURE_COMBAT_WINCE_SOUND = 0x2,
  CREATURE_COMBAT_SHOT_SOUND = 0x3,
  CREATURE_COMBAT_KILL_SOUND = 0x4,
  CREATURE_COMBAT_EXTRA_SOUND_1 = 0x5,
  CREATURE_COMBAT_EXTRA_SOUND_2 = 0x6,
};

/*   22 */
enum ARTIFACT
{
  ARTIFACT_ULTIMATE_BOOK_OF_KNOWLEDGE = 0x0,
  ARTIFACT_ULTIMATE_SWORD_OF_DOMINION = 0x1,
  ARTIFACT_ULTIMATE_CLOAK_OF_PROTECTION = 0x2,
  ARTIFACT_ULTIMATE_WAND_OF_MAGIC = 0x3,
  ARTIFACT_ULTIMATE_SHIELD = 0x4,
  ARTIFACT_ULTIMATE_STAFF = 0x5,
  ARTIFACT_ULTIMATE_CROWN = 0x6,
  ARTIFACT_GOLDEN_GOOSE = 0x7,
  ARTIFACT_ARCANE_NECKLACE_OF_MAGIC = 0x8,
  ARTIFACT_CASTERS_BRACELET_OF_MAGIC = 0x9,
  ARTIFACT_MAGES_RING_OF_POWER = 0xA,
  ARTIFACT_WITCHS_BROACH_OF_MAGIC = 0xB,
  ARTIFACT_MEDAL_OF_VALOR = 0xC,
  ARTIFACT_MEDAL_OF_COURAGE = 0xD,
  ARTIFACT_MEDAL_OF_HONOR = 0xE,
  ARTIFACT_MEDAL_OF_DISTINCTION = 0xF,
  ARTIFACT_FIZBIN_OF_MISFOURTUNE = 0x10,
  ARTIFACT_THUNDER_MACE_OF_DOMINION = 0x11,
  ARTIFACT_ARMORED_GAUNTLETS_OF_PROTECTION = 0x12,
  ARTIFACT_DEFENDER_HELM_OF_PROTECTION = 0x13,
  ARTIFACT_GIANT_FLAIL_OF_DOMINION = 0x14,
  ARTIFACT_BALLISTA_OF_QUICKNESS = 0x15,
  ARTIFACT_STEALTH_SHIELD_OF_PROTECTION = 0x16,
  ARTIFACT_DRAGON_SWORD_OF_DOMINION = 0x17,
  ARTIFACT_POWER_AXE_OF_DOMINION = 0x18,
  ARTIFACT_DIVINE_BREASTPLATE_OF_PROTECTION = 0x19,
  ARTIFACT_MINOR_SCROLL_OF_KNOWLEDGE = 0x1A,
  ARTIFACT_MAJOR_SCROLL_OF_KNOWLEDGE = 0x1B,
  ARTIFACT_SUPERIOR_SCROLL_OF_KNOWLEDGE = 0x1C,
  ARTIFACT_FOREMOST_SCROLL_OF_KNOWLEDGE = 0x1D,
  ARTIFACT_ENDLESS_SACK_OF_GOLD = 0x1E,
  ARTIFACT_ENDLESS_BAG_OF_GOLD = 0x1F,
  ARTIFACT_ENDLESS_PURSE_OF_GOLD = 0x20,
  ARTIFACT_NOMAD_BOOTS_OF_MOBILITY = 0x21,
  ARTIFACT_TRAVELERS_BOOTS_OF_MOBILITY = 0x22,
  ARTIFACT_LUCKY_RABBITS_FOOT = 0x23,
  ARTIFACT_GOLDEN_HORSESHOE = 0x24,
  ARTIFACT_GAMBLERS_LUCKY_COIN = 0x25,
  ARTIFACT_FOUR_LEAF_CLOVER = 0x26,
  ARTIFACT_TRUE_COMPASS_OF_MOBILITY = 0x27,
  ARTIFACT_SAILORS_ASTROLABE_OF_MOBILITY = 0x28,
  ARTIFACT_EVIL_EYE = 0x29,
  ARTIFACT_ENCHANTED_HOURGLASS = 0x2A,
  ARTIFACT_GOLD_WATCH = 0x2B,
  ARTIFACT_SKULLCAP = 0x2C,
  ARTIFACT_ICE_CLOAK = 0x2D,
  ARTIFACT_FIRE_CLOAK = 0x2E,
  ARTIFACT_LIGHTNING_HELM = 0x2F,
  ARTIFACT_EVERCOLD_ICICLE = 0x30,
  ARTIFACT_EVERHOT_LAVA_ROCK = 0x31,
  ARTIFACT_LIGHTNING_ROD = 0x32,
  ARTIFACT_SNAKE_RING = 0x33,
  ARTIFACT_ANKH = 0x34,
  ARTIFACT_BOOK_OF_ELEMENTS = 0x35,
  ARTIFACT_ELEMENTAL_RING = 0x36,
  ARTIFACT_HOLY_PENDANT = 0x37,
  ARTIFACT_PENDANT_OF_FREE_WILL = 0x38,
  ARTIFACT_PENDANT_OF_LIFE = 0x39,
  ARTIFACT_SERENITY_PENDANT = 0x3A,
  ARTIFACT_SEEING_EYE_PENDANT = 0x3B,
  ARTIFACT_KINETIC_PENDANT = 0x3C,
  ARTIFACT_PENDANT_OF_DEATH = 0x3D,
  ARTIFACT_WAND_OF_NEGATION = 0x3E,
  ARTIFACT_GOLDEN_BOW = 0x3F,
  ARTIFACT_TELESCOPE = 0x40,
  ARTIFACT_STATESMANS_QUILL = 0x41,
  ARTIFACT_WIZARDS_HAT = 0x42,
  ARTIFACT_POWER_RING = 0x43,
  ARTIFACT_AMMO_CART = 0x44,
  ARTIFACT_TAX_LIEN = 0x45,
  ARTIFACT_HIDEOUS_MASK = 0x46,
  ARTIFACT_ENDLESS_POUCH_OF_SULFUR = 0x47,
  ARTIFACT_ENDLESS_VIAL_OF_MERCURY = 0x48,
  ARTIFACT_ENDLESS_POUCH_OF_GEMS = 0x49,
  ARTIFACT_ENDLESS_CORD_OF_WOOD = 0x4A,
  ARTIFACT_ENDLESS_CART_OF_ORE = 0x4B,
  ARTIFACT_ENDLESS_POUCH_OF_CRYSTAL = 0x4C,
  ARTIFACT_SPIKED_HELM = 0x4D,
  ARTIFACT_SPIKED_SHIELD = 0x4E,
  ARTIFACT_WHITE_PEARL = 0x4F,
  ARTIFACT_BLACK_PEARL = 0x50,
  ARTIFACT_MAGIC_BOOK = 0x51,
  ARTIFACT_NONE1 = 0x52,
  ARTIFACT_NONE2 = 0x53,
  ARTIFACT_NONE3 = 0x54,
  ARTIFACT_NONE4 = 0x55,
  ARTIFACT_SPELL_SCROLL = 0x56,
  ARTIFACT_ARM_OF_THE_MARTYR = 0x57,
  ARTIFACT_BREASTPLATE_OF_ANDURAN = 0x58,
  ARTIFACT_BROACH_OF_SHIELDING = 0x59,
  ARTIFACT_BATTLE_GARB_OF_ANDURAN = 0x5A,
  ARTIFACT_CRYSTAL_BALL = 0x5B,
  ARTIFACT_HEART_OF_FIRE = 0x5C,
  ARTIFACT_HEART_OF_ICE = 0x5D,
  ARTIFACT_HELMET_OF_ANDURAN = 0x5E,
  ARTIFACT_HOLY_HAMMER = 0x5F,
  ARTIFACT_LEGENDARY_SCEPTER = 0x60,
  ARTIFACT_MASTHEAD = 0x61,
  ARTIFACT_SPHERE_OF_NEGATION = 0x62,
  ARTIFACT_STAFF_OF_WIZARDRY = 0x63,
  ARTIFACT_SWORD_BREAKER = 0x64,
  ARTIFACT_SWORD_OF_ANDURAN = 0x65,
  ARTIFACT_SPADE_OF_NECROMANCY = 0x66,
};

/*   23 */
enum MENU_BUTTON
{
  MENU_BUTTON_640X480 = 0x9C45,
  MENU_BUTTON_800X600 = 0x9C46,
  MENU_BUTTON_1024X768 = 0x9C47,
  MENU_BUTTON_1280X1024 = 0x9C48,
  MENU_BUTTON_FULLSCREEN = 0x9C49,
  MENU_BUTTON_MANUAL = 0x9C74,
  MENU_BUTTON_ABOUT = 0x9C75,
  MENU_BUTTON_PEASANTS = 0xA028,
  MENU_BUTTON_ARCHERS = 0xA029,
  MENU_BUTTON_RANGES = 0xA02A,
  MENU_BUTTON_PIKEMEN = 0xA02B,
  MENU_BUTTON_VETERAN_PIKEMEN = 0xA02C,
  MENU_BUTTON_SWORDSMEN = 0xA02D,
  MENU_BUTTON_VETERAN_SWORDSMEN = 0xA02E,
  MENU_BUTTON_CAVALRIES = 0xA02F,
  MENU_BUTTON_CHAMPIONS = 0xA030,
  MENU_BUTTON_PALADINS = 0xA031,
  MENU_BUTTON_CRUSADERS = 0xA032,
  MENU_BUTTON_GOBLINS = 0xA033,
  MENU_BUTTON_ORCS = 0xA034,
  MENU_BUTTON_ORC_CHIEFS = 0xA035,
  MENU_BUTTON_WOLVES = 0xA036,
  MENU_BUTTON_OGRES = 0xA037,
  MENU_BUTTON_OGRE_LORDS = 0xA038,
  MENU_BUTTON_TROLLS = 0xA039,
  MENU_BUTTON_WAR_TROLLS = 0xA03A,
  MENU_BUTTON_CYCLOPES = 0xA03B,
  MENU_BUTTON_SPRITES = 0xA03C,
  MENU_BUTTON_DWARVES = 0xA03D,
  MENU_BUTTON_BATTLE_DWARVES = 0xA03E,
  MENU_BUTTON_ELVES = 0xA03F,
  MENU_BUTTON_GRAND_ELVES = 0xA040,
  MENU_BUTTON_DRUIDS = 0xA041,
  MENU_BUTTON_GREATER_DRUIDS = 0xA042,
  MENU_BUTTON_UNICORNS = 0xA043,
  MENU_BUTTON_PHOENIXES = 0xA044,
  MENU_BUTTON_CENTAURS = 0xA045,
  MENU_BUTTON_GARGOYLES = 0xA046,
  MENU_BUTTON_GRIFFINS = 0xA047,
  MENU_BUTTON_MINOTAURS = 0xA048,
  MENU_BUTTON_MINOTAUR_KINDS = 0xA049,
  MENU_BUTTON_HYDRAS = 0xA04A,
  MENU_BUTTON_GREEN_DRAGONS = 0xA04B,
  MENU_BUTTON_RED_DRAGONS = 0xA04C,
  MENU_BUTTON_BLACK_DRAGONS = 0xA04D,
  MENU_BUTTON_HALFLINGS = 0xA04E,
  MENU_BUTTON_BOARDS = 0xA04F,
  MENU_BUTTON_IRON_GOLEMS = 0xA050,
  MENU_BUTTON_STEEL_GOLEMS = 0xA051,
  MENU_BUTTON_ROCS = 0xA052,
  MENU_BUTTON_MAGI = 0xA053,
  MENU_BUTTON_ARCHMAGI = 0xA054,
  MENU_BUTTON_GIANTS = 0xA055,
  MENU_BUTTON_TITANS = 0xA056,
  MENU_BUTTON_SKELETONS = 0xA057,
  MENU_BUTTON_ZOMBIES = 0xA058,
  MENU_BUTTON_MUTANT_ZOMBIES = 0xA059,
  MENU_BUTTON_MUMMIES = 0xA05A,
  MENU_BUTTON_ROYAL_MUMMIES = 0xA05B,
  MENU_BUTTON_VAMPIRES = 0xA05C,
  MENU_BUTTON_VAMPIRE_LORDS = 0xA05D,
  MENU_BUTTON_LICHS = 0xA05E,
  MENU_BUTTON_POWER_LICHES = 0xA05F,
  MENU_BUTTON_BONE_DRAGONS = 0xA060,
  MENU_BUTTON_ROGUES = 0xA061,
  MENU_BUTTON_NOMADS = 0xA062,
  MENU_BUTTON_GHOSTS = 0xA063,
  MENU_BUTTON_GENIES = 0xA064,
  MENU_BUTTON_MEDUSAS = 0xA065,
  MENU_BUTTON_EARTH_ELEMENTALS = 0xA066,
  MENU_BUTTON_AIR_ELEMENTALS = 0xA067,
  MENU_BUTTON_FIRE_ELEMENTALS = 0xA068,
  MENU_BUTTON_WATER_ELEMENTALS = 0xA069,
  MENU_BUTTON_QUIT = 0xA0B4,
  MENU_BUTTON_VIEW_ENTIRE_MAP = 0xA0B5,
  MENU_BUTTON_EXTRA_HERO_MOBILITY = 0xA0B6,
  MENU_BUTTON_FREE_SPELLS = 0xA0B7,
  MENU_BUTTON_FREE_RESOURCES = 0xA0B8,
  MENU_BUTTON_NO_PATHFINDING = 0xA410,
  MENU_BUTTON_BASIC_PATHFINDING = 0xA411,
  MENU_BUTTON_ADVANCED_PATHFINDING = 0xA412,
  MENU_BUTTON_EXPERT_PATHFINDING = 0xA413,
  MENU_BUTTON_NO_ARCHERY = 0xA414,
  MENU_BUTTON_BASIC_ARCHERY = 0xA415,
  MENU_BUTTON_ADVANCED_ARCHERY = 0xA416,
  MENU_BUTTON_EXPERT_ARCHERY = 0xA417,
  MENU_BUTTON_NO_LOGISTICS = 0xA418,
  MENU_BUTTON_BASIC_LOGISTICS = 0xA419,
  MENU_BUTTON_ADVANCED_LOGISTICS = 0xA41A,
  MENU_BUTTON_EXPERT_LOGISTICS = 0xA41B,
  MENU_BUTTON_NO_SCOUTING = 0xA41C,
  MENU_BUTTON_BASIC_SCOUTING = 0xA41D,
  MENU_BUTTON_ADVANCED_SCOUTING = 0xA41E,
  MENU_BUTTON_EXPERT_SCOUTING = 0xA41F,
  MENU_BUTTON_NO_DIPLOMACY = 0xA420,
  MENU_BUTTON_BASIC_DIPLOMACY = 0xA421,
  MENU_BUTTON_ADVANCED_DIPLOMACY = 0xA422,
  MENU_BUTTON_EXPERT_DIPLOMACY = 0xA423,
  MENU_BUTTON_NO_NAVIGATION = 0xA424,
  MENU_BUTTON_BASIC_NAVIGATION = 0xA425,
  MENU_BUTTON_ADVANCED_NAVIGATION = 0xA426,
  MENU_BUTTON_EXPERT_NAVIGATION = 0xA427,
  MENU_BUTTON_NO_LEADERSHIP = 0xA428,
  MENU_BUTTON_BASIC_LEADERSHIP = 0xA429,
  MENU_BUTTON_ADVANCED_LEADERSHIP = 0xA42A,
  MENU_BUTTON_EXPERT_LEADERSHIP = 0xA42B,
  MENU_BUTTON_NO_WISDOM = 0xA42C,
  MENU_BUTTON_BASIC_WISDOM = 0xA42D,
  MENU_BUTTON_ADVANCED_WISDOM = 0xA42E,
  MENU_BUTTON_EXPERT_WISDOM = 0xA42F,
  MENU_BUTTON_NO_MYSTICISM = 0xA430,
  MENU_BUTTON_BASIC_MYSTICISM = 0xA431,
  MENU_BUTTON_ADVANCED_MYSTICISM = 0xA432,
  MENU_BUTTON_EXPERT_MYSTICISM = 0xA433,
  MENU_BUTTON_NO_LUCK = 0xA434,
  MENU_BUTTON_BASIC_LUCK = 0xA435,
  MENU_BUTTON_ADVANCED_LUCK = 0xA436,
  MENU_BUTTON_EXPERT_LUCK = 0xA437,
  MENU_BUTTON_NO_BALLISTICS = 0xA438,
  MENU_BUTTON_BASIC_BALLISTICS = 0xA439,
  MENU_BUTTON_ADVANCED_BALLISTICS = 0xA43A,
  MENU_BUTTON_EXPERT_BALLISTICS = 0xA43B,
  MENU_BUTTON_NO_EAGLE_EYES = 0xA43C,
  MENU_BUTTON_BASIC_EAGLE_EYES = 0xA43D,
  MENU_BUTTON_ADVANCED_EAGLE_EYES = 0xA43E,
  MENU_BUTTON_EXPERT_EAGLE_EYES = 0xA43F,
  MENU_BUTTON_NO_NECROMANCY = 0xA440,
  MENU_BUTTON_BASIC_NECROMANCY = 0xA441,
  MENU_BUTTON_ADVANCED_NECROMANCY = 0xA442,
  MENU_BUTTON_EXPERT_NECROMANCY = 0xA443,
  MENU_BUTTON_NO_ESTATES = 0xA444,
  MENU_BUTTON_BASIC_ESTATES = 0xA445,
  MENU_BUTTON_ADVANCED_ESTATES = 0xA446,
  MENU_BUTTON_EXPERT_ESTATES = 0xA447,
  MENU_BUTTON_BUILD_MAGE_GUILD = 0xA7F8,
  MENU_BUTTON_BUILD_THIEVES_GUILD = 0xA7F9,
  MENU_BUTTON_BUILD_TAVERN = 0xA7FA,
  MENU_BUTTON_BUILD_DOCK = 0xA7FB,
  MENU_BUTTON_BUILD_WELL = 0xA7FC,
  MENU_BUTTON_BUILD_TENT = 0xA7FD,
  MENU_BUTTON_BUILD_CASTLE = 0xA7FE,
  MENU_BUTTON_BUILD_STATUE = 0xA7FF,
  MENU_BUTTON_BUILD_LEFT_TURRET = 0xA800,
  MENU_BUTTON_BUILD_RIGHT_TURRET = 0xA801,
  MENU_BUTTON_BUILD_MARKET = 0xA802,
  MENU_BUTTON_BUILD_1ST_LEVEL_GROWER = 0xA803,
  MENU_BUTTON_BUILD_MOAT = 0xA804,
  MENU_BUTTON_BUILD_TOWN_SPECIFIC_BUILDING = 0xA805,
  MENU_BUTTON_BUILD_CAPTAINS_QUARTERS = 0xA807,
  MENU_BUTTON_BUILD_DWELLING_1 = 0xA80B,
  MENU_BUTTON_BUILD_DWELLING_2 = 0xA80C,
  MENU_BUTTON_BUILD_DWELLING_3 = 0xA80D,
  MENU_BUTTON_BUILD_DWELLING_4 = 0xA80E,
  MENU_BUTTON_BUILD_DWELLING_5 = 0xA80F,
  MENU_BUTTON_BUILD_DWELLING_6 = 0xA810,
  MENU_BUTTON_BUILD_DWELLING_2_UPGRADE = 0xA811,
  MENU_BUTTON_BUILD_DWELLING_3_UPGRADE = 0xA812,
  MENU_BUTTON_BUILD_DWELLING_4_UPDGRADE = 0xA813,
  MENU_BUTTON_BUILD_DWELLING_5_UPGRADE = 0xA814,
  MENU_BUTTON_BUILD_DWELLING_6_UPGRADE = 0xA815,
  MENU_BUTTON_BUILD_DWELLING_6_UPGRADE_2 = 0xA816,
  MENU_BUTTON_BUILD_ALL_BUILDINGS = 0xA85C,
};

/*   24 */
enum INPUT_EVENT_CODE
{
  INPUT_KEYDOWN_EVENT_CODE = 0x1,
  INPUT_KEYUP_EVENT_CODE = 0x2,
  INPUT_MOUSEMOVE_EVENT_CODE = 0x4,
  INPUT_LEFT_CLICK_EVENT_CODE = 0x8,
  INPUT_LEFT_UP_EVENT_CODE = 0x10,
  INPUT_RIGHT_CLICK = 0x20,
  INPUT_RIGHT_UP_EVENT_CODE = 0x40,
  INPUT_GUI_MESSAGE_CODE = 0x200,
};

/*   25 */
enum GUI_MESSAGE_CODE
{
  GUI_MESSAGE_REPAINT = 0x2,
  GUI_MESSAGE_SET_CONTENTS = 0x3,
  GUI_MESSAGE_SET_IMG_IDX = 0x4,
  GUI_MESSAGE_ADD_FLAGS = 0x5,
  GUI_MESSAGE_SET_ICON = 0x9,
  GUI_MESSAGE_BUTTON_PRESSED = 0xD,
  GUI_MESSAGE_SET_OFFSETX = 0x34,
  GUI_MESSAGE_SET_OFFSETY = 0x35,
  GUI_MESSAGE_DROPLIST_ADD = 0x38,
  GUI_MESSAGE_REPLACE_ICON = 0x3C,
  GUI_MESSAGE_SET_WIDTH = 0x3D,
};

/*   26 */
enum MACRO_REG_NONE
{
  REG_NONE = 0,
  REG_SZ = 1,
  REG_EXPAND_SZ = 2,
  REG_BINARY = 3,
  REG_DWORD = 4,
};

/*   27 */
enum MACRO_MF_ENABLED
{
  MF_ENABLED = 0x0,
  MF_GRAYED = 0x1,
  MF_DISABLED = 0x2,
};

/*   28 */
enum MACRO_SMP
{
  SMP_FREE = 0x1,
  SMP_DONE = 0x2,
  SMP_PLAYING = 0x4,
  SMP_STOPPED = 0x8,
  SMP_PLAYINGBUTRELEASED = 0x10,
};

/*   29 */
enum MACRO_PC
{
  PC_RESERVED = 0x1,
  PC_EXPLICIT = 0x2,
  PC_NOCOLLAPSE = 0x4,
};

/*   30 */
enum MACRO_DDERR
{
  DDERR_GENERIC = -2147467259,
  DDERR_HEIGHTALIGN = -2005532582,
  DDERR_INCOMPATIBLEPRIMARY = -2005532577,
  DDERR_INVALIDCAPS = -2005532572,
  DDERR_INVALIDCLIPLIST = -2005532562,
  DDERR_INVALIDMODE = -2005532552,
  DDERR_INVALIDOBJECT = -2005532542,
};

/*   31 */
enum MACRO_DDERR_INVALIDPARAMS
{
  DDERR_INVALIDPARAMS = -2147024809,
  DDERR_INVALIDPIXELFORMAT = -2005532527,
  DDERR_INVALIDRECT = -2005532522,
  DDERR_LOCKEDSURFACES = -2005532512,
  DDERR_NO3D = -2005532502,
  DDERR_NOALPHAHW = -2005532492,
  DDERR_NOCLIPLIST = -2005532467,
  DDERR_NOCOLORCONVHW = -2005532462,
  DDERR_NOCOOPERATIVELEVELSET = -2005532460,
  DDERR_NOCOLORKEY = -2005532457,
  DDERR_NOCOLORKEYHW = -2005532452,
  DDERR_NODIRECTDRAWSUPPORT = -2005532450,
  DDERR_NOEXCLUSIVEMODE = -2005532447,
  DDERR_NOFLIPHW = -2005532442,
  DDERR_NOGDI = -2005532432,
  DDERR_NOMIRRORHW = -2005532422,
  DDERR_NOTFOUND = -2005532417,
  DDERR_NOOVERLAYHW = -2005532412,
  DDERR_NORASTEROPHW = -2005532392,
  DDERR_NOROTATIONHW = -2005532382,
  DDERR_NOSTRETCHHW = -2005532362,
  DDERR_NOT4BITCOLOR = -2005532356,
  DDERR_NOT4BITCOLORINDEX = -2005532355,
  DDERR_NOT8BITCOLOR = -2005532352,
  DDERR_NOTEXTUREHW = -2005532342,
  DDERR_NOVSYNCHW = -2005532337,
  DDERR_NOZBUFFERHW = -2005532332,
  DDERR_NOZOVERLAYHW = -2005532322,
  DDERR_OUTOFCAPS = -2005532312,
};

/*   32 */
enum MACRO_DDERR_OUTOFMEMORY
{
  DDERR_OUTOFMEMORY = -2147024882,
  DDERR_OUTOFVIDEOMEMORY = -2005532292,
  DDERR_OVERLAYCANTCLIP = -2005532290,
  DDERR_OVERLAYCOLORKEYONLYONEACTIVE = -2005532288,
  DDERR_PALETTEBUSY = -2005532285,
  DDERR_COLORKEYNOTSET = -2005532272,
  DDERR_SURFACEALREADYATTACHED = -2005532262,
  DDERR_SURFACEALREADYDEPENDENT = -2005532252,
  DDERR_SURFACEBUSY = -2005532242,
  DDERR_CANTLOCKSURFACE = -2005532237,
  DDERR_SURFACEISOBSCURED = -2005532232,
  DDERR_SURFACELOST = -2005532222,
  DDERR_SURFACENOTATTACHED = -2005532212,
  DDERR_TOOBIGHEIGHT = -2005532202,
  DDERR_TOOBIGSIZE = -2005532192,
  DDERR_TOOBIGWIDTH = -2005532182,
};

/*   33 */
enum MACRO_DDERR_UNSUPPORTED
{
  DDERR_UNSUPPORTED = -2147467263,
  DDERR_UNSUPPORTEDFORMAT = -2005532162,
  DDERR_UNSUPPORTEDMASK = -2005532152,
  DDERR_VERTICALBLANKINPROGRESS = -2005532135,
  DDERR_WASSTILLDRAWING = -2005532132,
  DDERR_XALIGN = -2005532112,
  DDERR_INVALIDDIRECTDRAWGUID = -2005532111,
  DDERR_DIRECTDRAWALREADYCREATED = -2005532110,
  DDERR_NODIRECTDRAWHW = -2005532109,
  DDERR_PRIMARYSURFACEALREADYEXISTS = -2005532108,
  DDERR_NOEMULATION = -2005532107,
  DDERR_REGIONTOOSMALL = -2005532106,
  DDERR_CLIPPERISUSINGHWND = -2005532105,
  DDERR_NOCLIPPERATTACHED = -2005532104,
  DDERR_NOHWND = -2005532103,
  DDERR_HWNDSUBCLASSED = -2005532102,
  DDERR_HWNDALREADYSET = -2005532101,
  DDERR_NOPALETTEATTACHED = -2005532100,
  DDERR_NOPALETTEHW = -2005532099,
  DDERR_BLTFASTCANTCLIP = -2005532098,
  DDERR_NOBLTHW = -2005532097,
  DDERR_NODDROPSHW = -2005532096,
  DDERR_OVERLAYNOTVISIBLE = -2005532095,
  DDERR_NOOVERLAYDEST = -2005532094,
  DDERR_INVALIDPOSITION = -2005532093,
  DDERR_NOTAOVERLAYSURFACE = -2005532092,
  DDERR_EXCLUSIVEMODEALREADYSET = -2005532091,
  DDERR_NOTFLIPPABLE = -2005532090,
  DDERR_CANTDUPLICATE = -2005532089,
  DDERR_NOTLOCKED = -2005532088,
  DDERR_CANTCREATEDC = -2005532087,
  DDERR_NODC = -2005532086,
  DDERR_WRONGMODE = -2005532085,
  DDERR_IMPLICITLYCREATED = -2005532084,
  DDERR_NOTPALETTIZED = -2005532083,
  DDERR_UNSUPPORTEDMODE = -2005532082,
  DDERR_NOMIPMAPHW = -2005532081,
  DDERR_INVALIDSURFACETYPE = -2005532080,
  DDERR_NOOPTIMIZEHW = -2005532072,
  DDERR_NOTLOADED = -2005532071,
  DDERR_NOFOCUSWINDOW = -2005532070,
  DDERR_DCALREADYCREATED = -2005532052,
  DDERR_NONONLOCALVIDMEM = -2005532042,
  DDERR_CANTPAGELOCK = -2005532032,
  DDERR_CANTPAGEUNLOCK = -2005532012,
  DDERR_NOTPAGELOCKED = -2005531992,
  DDERR_MOREDATA = -2005531982,
  DDERR_VIDEONOTACTIVE = -2005531977,
  DDERR_DEVICEDOESNTOWNSURFACE = -2005531973,
};

/*   34 */
enum MACRO_MB
{
  MB_OK = 0x0,
  MB_OKCANCEL = 0x1,
  MB_ABORTRETRYIGNORE = 0x2,
  MB_YESNOCANCEL = 0x3,
  MB_YESNO = 0x4,
  MB_RETRYCANCEL = 0x5,
  MB_ICONHAND = 0x10,
  MB_ICONQUESTION = 0x20,
  MB_ICONEXCLAMATION = 0x30,
  MB_ICONASTERISK = 0x40,
  MB_USERICON = 0x80,
};

/*   35 */
enum RESOURCE_TYPE : __int16
{
  RESOURCE_TYPE_BITMAP = 0x0,
  RESOURCE_TYPE_ICN = 0x1,
  RESOURCE_TYPE_PALETTE = 0x2,
  RESOURCE_TYPE_TILESET = 0x3,
  RESOURCE_TYPE_FONT = 0x5,
  RESOURCE_TYPE_SAMPLE = 0x6,
};

/*   36 */
enum MANAGER_TYPE
{
  MANAGER_TYPE_HERO_WINDOW_MANAGER = 0x20,
  MANAGER_TYPE_RESOURCE_MAMANGER = 0x80,
  MANAGER_TYPE_SWAP_MANAGER = 0x100,
  MANAGER_TYPE_COMBAT_MANAGER = 0x200,
};

/*   37 */
enum SECONDARY_SKILL
{
  SECONDARY_SKILL_PATHFINDING = 0x0,
  SECONDARY_SKILL_ARCHERY = 0x1,
  SECONDARY_SKILL_LOGISTICS = 0x2,
  SECONDARY_SKILL_SCOUTING = 0x3,
  SECONDARY_SKILL_DIPLOMACY = 0x4,
  SECONDARY_SKILL_NAVIGATION = 0x5,
  SECONDARY_SKILL_LEADERSHIP = 0x6,
  SECONDARY_SKILL_WISDOM = 0x7,
  SECONDARY_SKILL_MYSTICISM = 0x8,
  SECONDARY_SKILL_LUCK = 0x9,
  SECONDARY_SKILL_BALLISTICS = 0xA,
  SECONDARY_SKILL_EAGLE_EYE = 0xB,
  SECONDARY_SKILL_NECROMANCY = 0xC,
  SECONDARY_SKILL_ESTATES = 0xD,
};

/*   38 */
enum PRIMARY_SKILL
{
  PRIMARY_SKILL_ATTACK = 0x0,
  PRIMARY_SKILL_DEFENSE = 0x1,
  PRIMARY_SKILL_SPELLPOWER = 0x2,
  PRIMARY_SKILL_KNOWLEDGE = 0x3,
};

/*   39 */
enum SPELL_CATEGORY
{
  SPELL_CATEGORY_COMBAT = 0x0,
  SPELL_CATEGORY_ADVENTURE = 0x1,
  SPELL_CATEGORY_ALL = 0x2,
};

/*   40 */
enum RESOURCE_CLEANUP_FLAGS
{
  RESOURCE_CLEANUP_FLAGS_DELETE = 0x1,
};

/*   41 */
enum BACKGROUND_TYPE : __int16
{
  BACKGROUND_IS_ICON = 0x1,
  BACKGROUND_IS_SOLID = 0x400,
  BACKGROUND_IS_FROM_FILE = 0x800,
};

/*   42 */
enum BUTTON_FLAGS
{
  BUTTON_IS_ARMED = 0x1,
};

/*   43 */
enum MOUSE_CURSOR_CATEGORY
{
  MOUSE_CURSOR_CATEGORY_ADVENTURE = 0x0,
  MOUSE_CURSOR_CATEGORY_COMBAT = 0x1,
  MOUSE_CURSOR_CATEGORY_SPELL = 0x2,
};

/*   44 */
enum MOUSE_CONSTANTS
{
  NUMBER_OF_CURSORS = 0x60,
};

/*   45 */
enum MANAGER_HANDLE_INPUT_RETURN_CODE
{
  MANAGER_FINISHED = 0x2,
};

/*   46 */
enum AI_SPELL_TYPES
{
  AI_BATTLEFIELD_AFFECTING_SPELL = 0x0,
  AI_MASS_BUFF_SPELL = 0x1,
  AI_MASS_DEBUFF_SPELL = 0x2,
  AI_BALL_SPALL = 0x3,
  AI_TARGET_BUFF_SPELL = 0x4,
  AI_TARGET_DAMAGE_OR_DEBUFF_SPELL = 0x5,
  AI_RESURRECT_SPELL = 0x6,
  AI_DISPEL_SPELL = 0x7,
};

/*   47 */
enum COMBAT_GUI
{
  COMBAT_GUI_MESSAGE_ROW_1 = 0xC,
  COMBAT_GUI_MESSAGE_ROW_2 = 0xD,
};

/*   48 */
enum MACRO_REDBOOK
{
  REDBOOK_ERROR = 0,
  REDBOOK_PLAYING = 1,
  REDBOOK_PAUSED = 2,
  REDBOOK_STOPPED = 3,
};

/*   49 */
enum MACRO_SEQ
{
  SEQ_FREE = 0x1,
  SEQ_DONE = 0x2,
  SEQ_PLAYING = 0x4,
  SEQ_STOPPED = 0x8,
  SEQ_PLAYINGBUTRELEASED = 0x10,
};

/*   50 */
enum MACRO_VK
{
  VK_LBUTTON = 0x1,
  VK_RBUTTON = 0x2,
  VK_CANCEL = 0x3,
  VK_MBUTTON = 0x4,
  VK_BACK = 0x8,
  VK_TAB = 0x9,
  VK_CLEAR = 0xC,
  VK_RETURN = 0xD,
  VK_SHIFT = 0x10,
  VK_CONTROL = 0x11,
  VK_MENU = 0x12,
  VK_PAUSE = 0x13,
  VK_CAPITAL = 0x14,
  VK_KANA = 0x15,
  VK_HANGEUL = 0x15,
  VK_HANGUL = 0x15,
  VK_JUNJA = 0x17,
  VK_FINAL = 0x18,
  VK_HANJA = 0x19,
  VK_KANJI = 0x19,
  VK_ESCAPE = 0x1B,
  VK_CONVERT = 0x1C,
  VK_NONCONVERT = 0x1D,
  VK_ACCEPT = 0x1E,
  VK_MODECHANGE = 0x1F,
  VK_SPACE = 0x20,
  VK_PRIOR = 0x21,
  VK_NEXT = 0x22,
  VK_END = 0x23,
  VK_HOME = 0x24,
  VK_LEFT = 0x25,
  VK_UP = 0x26,
  VK_RIGHT = 0x27,
  VK_DOWN = 0x28,
  VK_SELECT = 0x29,
  VK_PRINT = 0x2A,
  VK_EXECUTE = 0x2B,
  VK_SNAPSHOT = 0x2C,
  VK_INSERT = 0x2D,
  VK_DELETE = 0x2E,
  VK_HELP = 0x2F,
  VK_LWIN = 0x5B,
  VK_RWIN = 0x5C,
  VK_APPS = 0x5D,
  VK_NUMPAD0 = 0x60,
  VK_NUMPAD1 = 0x61,
  VK_NUMPAD2 = 0x62,
  VK_NUMPAD3 = 0x63,
  VK_NUMPAD4 = 0x64,
  VK_NUMPAD5 = 0x65,
  VK_NUMPAD6 = 0x66,
  VK_NUMPAD7 = 0x67,
  VK_NUMPAD8 = 0x68,
  VK_NUMPAD9 = 0x69,
  VK_MULTIPLY = 0x6A,
  VK_ADD = 0x6B,
  VK_SEPARATOR = 0x6C,
  VK_SUBTRACT = 0x6D,
  VK_DECIMAL = 0x6E,
  VK_DIVIDE = 0x6F,
  VK_F1 = 0x70,
  VK_F2 = 0x71,
  VK_F3 = 0x72,
  VK_F4 = 0x73,
  VK_F5 = 0x74,
  VK_F6 = 0x75,
  VK_F7 = 0x76,
  VK_F8 = 0x77,
  VK_F9 = 0x78,
  VK_F10 = 0x79,
  VK_F11 = 0x7A,
  VK_F12 = 0x7B,
  VK_F13 = 0x7C,
  VK_F14 = 0x7D,
  VK_F15 = 0x7E,
  VK_F16 = 0x7F,
  VK_F17 = 0x80,
  VK_F18 = 0x81,
  VK_F19 = 0x82,
  VK_F20 = 0x83,
  VK_F21 = 0x84,
  VK_F22 = 0x85,
  VK_F23 = 0x86,
  VK_F24 = 0x87,
  VK_NUMLOCK = 0x90,
  VK_SCROLL = 0x91,
  VK_LSHIFT = 0xA0,
  VK_RSHIFT = 0xA1,
  VK_LCONTROL = 0xA2,
  VK_RCONTROL = 0xA3,
  VK_LMENU = 0xA4,
  VK_RMENU = 0xA5,
  VK_PROCESSKEY = 0xE5,
  VK_ATTN = 0xF6,
  VK_CRSEL = 0xF7,
  VK_EXSEL = 0xF8,
  VK_EREOF = 0xF9,
  VK_PLAY = 0xFA,
  VK_ZOOM = 0xFB,
  VK_NONAME = 0xFC,
  VK_PA1 = 0xFD,
  VK_OEM_CLEAR = 0xFE,
  WH_MIN = 0xFFFFFFFF,
};

/*   51 */
enum MACRO_AUXCAPS
{
  AUXCAPS_CDAUDIO = 1,
  AUXCAPS_AUXIN = 2,
};

/*   52 */
enum MACRO_VER_PLATFORM
{
  VER_PLATFORM_WIN32s = 0,
  VER_PLATFORM_WIN32_WINDOWS = 1,
  VER_PLATFORM_WIN32_NT = 2,
};

/*   53 */
enum MACRO_COLOR_SCROLLBAR
{
  COLOR_SCROLLBAR = 0,
  COLOR_BACKGROUND = 1,
  COLOR_ACTIVECAPTION = 2,
  COLOR_INACTIVECAPTION = 3,
  COLOR_MENU = 4,
  COLOR_WINDOW = 5,
  COLOR_WINDOWFRAME = 6,
  COLOR_MENUTEXT = 7,
  COLOR_WINDOWTEXT = 8,
  COLOR_CAPTIONTEXT = 9,
  COLOR_ACTIVEBORDER = 10,
  COLOR_INACTIVEBORDER = 11,
  COLOR_APPWORKSPACE = 12,
  COLOR_HIGHLIGHT = 13,
  COLOR_HIGHLIGHTTEXT = 14,
  COLOR_BTNFACE = 15,
  COLOR_BTNSHADOW = 16,
  COLOR_GRAYTEXT = 17,
  COLOR_BTNTEXT = 18,
  COLOR_INACTIVECAPTIONTEXT = 19,
  COLOR_BTNHIGHLIGHT = 20,
  COLOR_3DDKSHADOW = 21,
  COLOR_3DLIGHT = 22,
  COLOR_INFOTEXT = 23,
  COLOR_INFOBK = 24,
  COLOR_HOTLIGHT = 26,
  COLOR_GRADIENTACTIVECAPTION = 27,
  COLOR_GRADIENTINACTIVECAPTION = 28,
};

/*   54 */
enum MACRO_CS_VREDRAW
{
  CS_VREDRAW = 0x1,
  CS_HREDRAW = 0x2,
  CS_DBLCLKS = 0x8,
  CS_OWNDC = 0x20,
  CS_CLASSDC = 0x40,
  CS_PARENTDC = 0x80,
  CS_NOCLOSE = 0x200,
  CS_SAVEBITS = 0x800,
  CS_BYTEALIGNCLIENT = 0x1000,
  CS_BYTEALIGNWINDOW = 0x2000,
  CS_GLOBALCLASS = 0x4000,
  CS_IME = 0x10000,
};

/*   55 */
enum MACRO_WM
{
  WM_NULL = 0x0,
  WM_CREATE = 0x1,
  WM_DESTROY = 0x2,
  WM_MOVE = 0x3,
  WM_SIZEWAIT = 0x4,
  WM_SIZE = 0x5,
  WM_ACTIVATE = 0x6,
  WM_SETFOCUS = 0x7,
  WM_KILLFOCUS = 0x8,
  WM_SETVISIBLE = 0x9,
  WM_ENABLE = 0xA,
  WM_SETREDRAW = 0xB,
  WM_SETTEXT = 0xC,
  WM_GETTEXT = 0xD,
  WM_GETTEXTLENGTH = 0xE,
  WM_PAINT = 0xF,
  WM_CLOSE = 0x10,
  WM_QUERYENDSESSION = 0x11,
  WM_QUIT = 0x12,
  WM_QUERYOPEN = 0x13,
  WM_ERASEBKGND = 0x14,
  WM_SYSCOLORCHANGE = 0x15,
  WM_ENDSESSION = 0x16,
  WM_SYSTEMERROR = 0x17,
  WM_SHOWWINDOW = 0x18,
  WM_CTLCOLOR = 0x19,
  WM_WININICHANGE = 0x1A,
  WM_SETTINGCHANGE = 0x1A,
  WM_DEVMODECHANGE = 0x1B,
  WM_ACTIVATEAPP = 0x1C,
  WM_FONTCHANGE = 0x1D,
  WM_TIMECHANGE = 0x1E,
  WM_CANCELMODE = 0x1F,
  WM_SETCURSOR = 0x20,
  WM_MOUSEACTIVATE = 0x21,
  WM_CHILDACTIVATE = 0x22,
  WM_QUEUESYNC = 0x23,
  WM_GETMINMAXINFO = 0x24,
  WM_LOGOFF = 0x25,
  WM_PAINTICON = 0x26,
  WM_ICONERASEBKGND = 0x27,
  WM_NEXTDLGCTL = 0x28,
  WM_ALTTABACTIVE = 0x29,
  WM_SPOOLERSTATUS = 0x2A,
  WM_DRAWITEM = 0x2B,
  WM_MEASUREITEM = 0x2C,
  WM_DELETEITEM = 0x2D,
  WM_VKEYTOITEM = 0x2E,
  WM_CHARTOITEM = 0x2F,
  WM_SETFONT = 0x30,
  WM_GETFONT = 0x31,
  WM_SETHOTKEY = 0x32,
  WM_GETHOTKEY = 0x33,
  WM_FILESYSCHANGE = 0x34,
  WM_ISACTIVEICON = 0x35,
  WM_QUERYPARKICON = 0x36,
  WM_QUERYDRAGICON = 0x37,
  WM_WINHELP = 0x38,
  WM_COMPAREITEM = 0x39,
  WM_FULLSCREEN = 0x3A,
  WM_CLIENTSHUTDOWN = 0x3B,
  WM_DDEMLEVENT = 0x3C,
  WM_GETOBJECT = 0x3D,
  MM_CALCSCROLL = 0x3F,
  WM_TESTING = 0x40,
  WM_COMPACTING = 0x41,
  WM_OTHERWINDOWCREATED = 0x42,
  WM_OTHERWINDOWDESTROYED = 0x43,
  WM_COMMNOTIFY = 0x44,
  WM_MEDIASTATUSCHANGE = 0x45,
  WM_WINDOWPOSCHANGING = 0x46,
  WM_WINDOWPOSCHANGED = 0x47,
  WM_POWER = 0x48,
  WM_COPYGLOBALDATA = 0x49,
  WM_COPYDATA = 0x4A,
  WM_CANCELJOURNAL = 0x4B,
  WM_LOGONNOTIFY = 0x4C,
  WM_KEYF1 = 0x4D,
  WM_NOTIFY = 0x4E,
  WM_ACCESS_WINDOW = 0x4F,
  WM_INPUTLANGCHANGEREQUEST = 0x50,
  WM_INPUTLANGCHANGE = 0x51,
  WM_TCARD = 0x52,
  WM_HELP = 0x53,
  WM_USERCHANGED = 0x54,
  WM_NOTIFYFORMAT = 0x55,
  WM_QM_ACTIVATE = 0x60,
  WM_HOOK_DO_CALLBACK = 0x61,
  WM_SYSCOPYDATA = 0x62,
  WM_FINALDESTROY = 0x70,
  WM_MEASUREITEM_CLIENTDATA = 0x71,
  WM_CONTEXTMENU = 0x7B,
  WM_STYLECHANGING = 0x7C,
  WM_STYLECHANGED = 0x7D,
  WM_DISPLAYCHANGE = 0x7E,
  WM_GETICON = 0x7F,
  WM_SETICON = 0x80,
  WM_NCCREATE = 0x81,
  WM_NCDESTROY = 0x82,
  WM_NCCALCSIZE = 0x83,
  WM_NCHITTEST = 0x84,
  WM_NCPAINT = 0x85,
  WM_NCACTIVATE = 0x86,
  WM_GETDLGCODE = 0x87,
  WM_SYNCPAINT = 0x88,
  WM_SYNCTASK = 0x89,
  WM_NCMOUSEMOVE = 0xA0,
  WM_NCLBUTTONDOWN = 0xA1,
  WM_NCLBUTTONUP = 0xA2,
  WM_NCLBUTTONDBLCLK = 0xA3,
  WM_NCRBUTTONDOWN = 0xA4,
  WM_NCRBUTTONUP = 0xA5,
  WM_NCRBUTTONDBLCLK = 0xA6,
  WM_NCMBUTTONDOWN = 0xA7,
  WM_NCMBUTTONUP = 0xA8,
  WM_NCMBUTTONDBLCLK = 0xA9,
  WM_NCXBUTTONDOWN = 0xAB,
  WM_NCXBUTTONUP = 0xAC,
  WM_NCXBUTTONDBLCLK = 0xAD,
  EM_GETSEL = 0xB0,
  EM_SETSEL = 0xB1,
  EM_GETRECT = 0xB2,
  EM_SETRECT = 0xB3,
  EM_SETRECTNP = 0xB4,
  EM_SCROLL = 0xB5,
  EM_LINESCROLL = 0xB6,
  EM_SCROLLCARET = 0xB7,
  EM_GETMODIFY = 0xB8,
  EM_SETMODIFY = 0xB9,
  EM_GETLINECOUNT = 0xBA,
  EM_LINEINDEX = 0xBB,
  EM_SETHANDLE = 0xBC,
  EM_GETHANDLE = 0xBD,
  EM_GETTHUMB = 0xBE,
  EM_LINELENGTH = 0xC1,
  EM_REPLACESEL = 0xC2,
  EM_SETFONT = 0xC3,
  EM_GETLINE = 0xC4,
  EM_LIMITTEXT = 0xC5,
  EM_CANUNDO = 0xC6,
  EM_UNDO = 0xC7,
  EM_FMTLINES = 0xC8,
  EM_LINEFROMCHAR = 0xC9,
  EM_SETWORDBREAK = 0xCA,
  EM_SETTABSTOPS = 0xCB,
  EM_SETPASSWORDCHAR = 0xCC,
  EM_EMPTYUNDOBUFFER = 0xCD,
  EM_GETFIRSTVISIBLELINE = 0xCE,
  EM_SETREADONLY = 0xCF,
  EM_SETWORDBREAKPROC = 0xD0,
  EM_GETWORDBREAKPROC = 0xD1,
  EM_GETPASSWORDCHAR = 0xD2,
  EM_SETMARGINS = 0xD3,
  EM_GETMARGINS = 0xD4,
  EM_POSFROMCHAR = 0xD5,
  EM_CHARFROMPOS = 0xD6,
  SBM_SETPOS = 0xE0,
  SBM_GETPOS = 0xE1,
  SBM_SETRANGE = 0xE2,
  SBM_GETRANGE = 0xE3,
  SBM_ENABLE_ARROWS = 0xE4,
  SBM_SETRANGEREDRAW = 0xE6,
  SBM_SETSCROLLINFO = 0xE9,
  SBM_GETSCROLLINFO = 0xEA,
  SBM_GETSCROLLBARINFO = 0xEB,
  BM_GETCHECK = 0xF0,
  BM_SETCHECK = 0xF1,
  BM_GETSTATE = 0xF2,
  BM_SETSTATE = 0xF3,
  BM_SETSTYLE = 0xF4,
  BM_CLICK = 0xF5,
  BM_GETIMAGE = 0xF6,
  BM_SETIMAGE = 0xF7,
  BM_SETDONTCLICK = 0xF8,
  WM_INPUT = 0xFF,
  WM_KEYFIRST = 0x100,
  WM_KEYDOWN = 0x100,
  WM_KEYUP = 0x101,
  WM_CHAR = 0x102,
  WM_DEADCHAR = 0x103,
  WM_SYSKEYDOWN = 0x104,
  WM_SYSKEYUP = 0x105,
  WM_SYSCHAR = 0x106,
  WM_SYSDEADCHAR = 0x107,
  WM_KEYLAST = 0x108,
  WM_YOMICHAR = 0x108,
  WM_UNICHAR = 0x109,
  WM_CONVERTREQUEST = 0x10A,
  WM_CONVERTRESULT = 0x10B,
  WM_IM_INFO = 0x10C,
  WM_IME_STARTCOMPOSITION = 0x10D,
  WM_IME_ENDCOMPOSITION = 0x10E,
  WM_IME_COMPOSITION = 0x10F,
  WM_IME_KEYLAST = 0x10F,
  WM_INITDIALOG = 0x110,
  WM_COMMAND = 0x111,
  WM_SYSCOMMAND = 0x112,
  WM_TIMER = 0x113,
  WM_HSCROLL = 0x114,
  WM_VSCROLL = 0x115,
  WM_INITMENU = 0x116,
  WM_INITMENUPOPUP = 0x117,
  WM_SYSTIMER = 0x118,
  WM_MENUSELECT = 0x11F,
  WM_MENUCHAR = 0x120,
  WM_ENTERIDLE = 0x121,
  WM_MENURBUTTONUP = 0x122,
  WM_MENUDRAG = 0x123,
  WM_MENUGETOBJECT = 0x124,
  WM_UNINITMENUPOPUP = 0x125,
  WM_MENUCOMMAND = 0x126,
  WM_CHANGEUISTATE = 0x127,
  WM_UPDATEUISTATE = 0x128,
  WM_QUERYUISTATE = 0x129,
  WM_LBTRACKPOINT = 0x131,
  WM_CTLCOLORMSGBOX = 0x132,
  WM_CTLCOLOREDIT = 0x133,
  WM_CTLCOLORLISTBOX = 0x134,
  WM_CTLCOLORBTN = 0x135,
  WM_CTLCOLORDLG = 0x136,
  WM_CTLCOLORSCROLLBAR = 0x137,
  WM_CTLCOLORSTATIC = 0x138,
  CB_GETEDITSEL = 0x140,
  CB_LIMITTEXT = 0x141,
  CB_SETEDITSEL = 0x142,
  CB_ADDSTRING = 0x143,
  CB_DELETESTRING = 0x144,
  CB_DIR = 0x145,
  CB_GETCOUNT = 0x146,
  CB_GETCURSEL = 0x147,
  CB_GETLBTEXT = 0x148,
  CB_GETLBTEXTLEN = 0x149,
  CB_INSERTSTRING = 0x14A,
  CB_RESETCONTENT = 0x14B,
  CB_FINDSTRING = 0x14C,
  CB_SELECTSTRING = 0x14D,
  CB_SETCURSEL = 0x14E,
  CB_SHOWDROPDOWN = 0x14F,
  CB_GETITEMDATA = 0x150,
  CB_SETITEMDATA = 0x151,
  CB_GETDROPPEDCONTROLRECT = 0x152,
  CB_SETITEMHEIGHT = 0x153,
  CB_GETITEMHEIGHT = 0x154,
  CB_SETEXTENDEDUI = 0x155,
  CB_GETEXTENDEDUI = 0x156,
  CB_GETDROPPEDSTATE = 0x157,
  CB_FINDSTRINGEXACT = 0x158,
  CB_SETLOCALE = 0x159,
  CB_GETLOCALE = 0x15A,
  CB_GETTOPINDEX = 0x15B,
  CB_SETTOPINDEX = 0x15C,
  CB_GETHORIZONTALEXTENT = 0x15D,
  CB_SETHORIZONTALEXTENT = 0x15E,
  CB_GETDROPPEDWIDTH = 0x15F,
  CB_SETDROPPEDWIDTH = 0x160,
  CB_INITSTORAGE = 0x161,
  CB_GETCOMBOBOXINFO = 0x164,
  STM_SETICON = 0x170,
  STM_GETICON = 0x171,
  STM_SETIMAGE = 0x172,
  STM_GETIMAGE = 0x173,
  LB_ADDSTRING = 0x180,
  LB_INSERTSTRING = 0x181,
  LB_DELETESTRING = 0x182,
  LB_SELITEMRANGEEX = 0x183,
  LB_RESETCONTENT = 0x184,
  LB_SETSEL = 0x185,
  LB_SETCURSEL = 0x186,
  LB_GETSEL = 0x187,
  LB_GETCURSEL = 0x188,
  LB_GETTEXT = 0x189,
  LB_GETTEXTLEN = 0x18A,
  LB_GETCOUNT = 0x18B,
  LB_SELECTSTRING = 0x18C,
  LB_DIR = 0x18D,
  LB_GETTOPINDEX = 0x18E,
  LB_FINDSTRING = 0x18F,
  LB_GETSELCOUNT = 0x190,
  LB_GETSELITEMS = 0x191,
  LB_SETTABSTOPS = 0x192,
  LB_GETHORIZONTALEXTENT = 0x193,
  LB_SETHORIZONTALEXTENT = 0x194,
  LB_SETCOLUMNWIDTH = 0x195,
  LB_ADDFILE = 0x196,
  LB_SETTOPINDEX = 0x197,
  LB_GETITEMRECT = 0x198,
  LB_GETITEMDATA = 0x199,
  LB_SETITEMDATA = 0x19A,
  LB_SELITEMRANGE = 0x19B,
  LB_SETANCHORINDEX = 0x19C,
  LB_GETANCHORINDEX = 0x19D,
  LB_SETCARETINDEX = 0x19E,
  LB_GETCARETINDEX = 0x19F,
  LB_SETITEMHEIGHT = 0x1A0,
  LB_GETITEMHEIGHT = 0x1A1,
  LB_FINDSTRINGEXACT = 0x1A2,
  LBCB_CARETON = 0x1A3,
  LBCB_CARETOFF = 0x1A4,
  LB_SETLOCALE = 0x1A5,
  LB_GETLOCALE = 0x1A6,
  LB_SETCOUNT = 0x1A7,
  LB_INITSTORAGE = 0x1A8,
  LB_ITEMFROMPOINT = 0x1A9,
  LB_INSERTSTRINGUPPER = 0x1AA,
  LB_INSERTSTRINGLOWER = 0x1AB,
  LB_ADDSTRINGUPPER = 0x1AC,
  LB_ADDSTRINGLOWER = 0x1AD,
  LB_GETLISTBOXINFO = 0x1B2,
  MN_SETHMENU = 0x1E0,
  MN_GETHMENU = 0x1E1,
  MN_SIZEWINDOW = 0x1E2,
  MN_OPENHIERARCHY = 0x1E3,
  MN_CLOSEHIERARCHY = 0x1E4,
  MN_SELECTITEM = 0x1E5,
  MN_CANCELMENUS = 0x1E6,
  MN_SELECTFIRSTVALIDITEM = 0x1E7,
  MN_GETPPOPUPMENU = 0x1EA,
  MN_FINDMENUWINDOWFROMPOINT = 0x1EB,
  MN_SHOWPOPUPWINDOW = 0x1EC,
  MN_BUTTONDOWN = 0x1ED,
  MN_MOUSEMOVE = 0x1EE,
  MN_BUTTONUP = 0x1EF,
  MN_SETTIMERTOOPENHIERARCHY = 0x1F0,
  MN_DBLCLK = 0x1F1,
  WM_MOUSEFIRST = 0x200,
  WM_MOUSEMOVE = 0x200,
  WM_LBUTTONDOWN = 0x201,
  WM_LBUTTONUP = 0x202,
  WM_LBUTTONDBLCLK = 0x203,
  WM_RBUTTONDOWN = 0x204,
  WM_RBUTTONUP = 0x205,
  WM_RBUTTONDBLCLK = 0x206,
  WM_MBUTTONDOWN = 0x207,
  WM_MBUTTONUP = 0x208,
  WM_MBUTTONDBLCLK = 0x209,
  WM_MOUSEWHEEL = 0x20A,
  WM_XBUTTONDOWN = 0x20B,
  WM_XBUTTONUP = 0x20C,
  WM_XBUTTONDBLCLK = 0x20D,
  WM_MOUSELAST = 0x20D,
  WM_PARENTNOTIFY = 0x210,
  WM_ENTERMENULOOP = 0x211,
  WM_EXITMENULOOP = 0x212,
  WM_NEXTMENU = 0x213,
  WM_SIZING = 0x214,
  WM_CAPTURECHANGED = 0x215,
  WM_MOVING = 0x216,
  WM_POWERBROADCAST = 0x218,
  WM_DEVICECHANGE = 0x219,
  WM_MDICREATE = 0x220,
  WM_MDIDESTROY = 0x221,
  WM_MDIACTIVATE = 0x222,
  WM_MDIRESTORE = 0x223,
  WM_MDINEXT = 0x224,
  WM_MDIMAXIMIZE = 0x225,
  WM_MDITILE = 0x226,
  WM_MDICASCADE = 0x227,
  WM_MDIICONARRANGE = 0x228,
  WM_MDIGETACTIVE = 0x229,
  WM_DROPOBJECT = 0x22A,
  WM_QUERYDROPOBJECT = 0x22B,
  WM_BEGINDRAG = 0x22C,
  WM_DRAGLOOP = 0x22D,
  WM_DRAGSELECT = 0x22E,
  WM_DRAGMOVE = 0x22F,
  WM_MDISETMENU = 0x230,
  WM_ENTERSIZEMOVE = 0x231,
  WM_EXITSIZEMOVE = 0x232,
  WM_DROPFILES = 0x233,
  WM_MDIREFRESHMENU = 0x234,
  WM_HANGEULFIRST = 0x280,
  WM_KANJIFIRST = 0x280,
  WM_IME_SETCONTEXT = 0x281,
  WM_IME_NOTIFY = 0x282,
  WM_IME_CONTROL = 0x283,
  WM_IME_COMPOSITIONFULL = 0x284,
  WM_IME_SELECT = 0x285,
  WM_IME_CHAR = 0x286,
  WM_IME_SYSTEM = 0x287,
  WM_IME_REQUEST = 0x288,
  WM_IME_KEYDOWN = 0x290,
  WM_IME_KEYUP = 0x291,
  WM_HANGEULLAST = 0x29F,
  WM_KANJILAST = 0x29F,
  WM_NCMOUSEHOVER = 0x2A0,
  WM_MOUSEHOVER = 0x2A1,
  WM_NCMOUSELEAVE = 0x2A2,
  WM_MOUSELEAVE = 0x2A3,
  WM_TRACKMOUSEEVENT_LAST = 0x2AF,
  WM_WTSSESSION_CHANGE = 0x2B1,
  WM_TABLET_FIRST = 0x2C0,
  WM_TABLET_LAST = 0x2DF,
  WM_CUT = 0x300,
  WM_COPY = 0x301,
  WM_PASTE = 0x302,
  WM_CLEAR = 0x303,
  WM_UNDO = 0x304,
  WM_RENDERFORMAT = 0x305,
  WM_RENDERALLFORMATS = 0x306,
  WM_DESTROYCLIPBOARD = 0x307,
  WM_DRAWCLIPBOARD = 0x308,
  WM_PAINTCLIPBOARD = 0x309,
  WM_VSCROLLCLIPBOARD = 0x30A,
  WM_SIZECLIPBOARD = 0x30B,
  WM_ASKCBFORMATNAME = 0x30C,
  WM_CHANGECBCHAIN = 0x30D,
  WM_HSCROLLCLIPBOARD = 0x30E,
  WM_QUERYNEWPALETTE = 0x30F,
  WM_PALETTEISCHANGING = 0x310,
  WM_PALETTECHANGED = 0x311,
  WM_HOTKEY = 0x312,
  WM_SYSMENU = 0x313,
  WM_HOOKMSG = 0x314,
  WM_EXITPROCESS = 0x315,
  WM_WAKETHREAD = 0x316,
  WM_PRINT = 0x317,
  WM_PRINTCLIENT = 0x318,
  WM_APPCOMMAND = 0x319,
  WM_THEMECHANGED = 0x31A,
  WM_HANDHELDFIRST = 0x358,
  WM_HANDHELDLAST = 0x35F,
  WM_AFXFIRST = 0x360,
  WM_AFXLAST = 0x37F,
  WM_PENWINFIRST = 0x380,
  WM_PENWINLAST = 0x38F,
  WM_INTERNAL_COALESCE_FIRST = 0x390,
  WM_COALESCE_FIRST = 0x390,
  WM_COALESCE_LAST = 0x39F,
  WM_MM_RESERVED_FIRST = 0x3A0,
  WM_MM_RESERVED_LAST = 0x3DF,
  WM_DDE_INITIATE = 0x3E0,
  WM_DDE_TERMINATE = 0x3E1,
  WM_DDE_ADVISE = 0x3E2,
  WM_DDE_UNADVISE = 0x3E3,
  WM_DDE_ACK = 0x3E4,
  WM_DDE_DATA = 0x3E5,
  WM_DDE_REQUEST = 0x3E6,
  WM_DDE_POKE = 0x3E7,
  WM_DDE_EXECUTE = 0x3E8,
  WM_DBNOTIFICATION = 0x3FD,
  WM_NETCONNECT = 0x3FE,
  WM_HIBERNATE = 0x3FF,
  WM_USER = 0x400,
  WM_APP = 0x8000,
};

/*   56 */
enum MACRO_GWL
{
  GWL_USERDATA = -21,
  GWL_EXSTYLE = -20,
  GWL_STYLE = -16,
  GWL_ID = -12,
  GWL_HWNDPARENT = -8,
  GWL_HINSTANCE = -6,
  GWL_WNDPROC = -4,
};

/*   57 */
enum MACRO_WS
{
  WS_OVERLAPPED = 0x0,
  WS_TILED = 0x0,
  WS_TABSTOP = 0x10000,
  WS_MAXIMIZEBOX = 0x10000,
  WS_GROUP = 0x20000,
  WS_MINIMIZEBOX = 0x20000,
  WS_THICKFRAME = 0x40000,
  WS_SIZEBOX = 0x40000,
  WS_SYSMENU = 0x80000,
  WS_HSCROLL = 0x100000,
  WS_VSCROLL = 0x200000,
  WS_DLGFRAME = 0x400000,
  WS_BORDER = 0x800000,
  WS_CAPTION = 0xC00000,
  WS_OVERLAPPEDWINDOW = 0xCF0000,
  WS_MAXIMIZE = 0x1000000,
  WS_CLIPCHILDREN = 0x2000000,
  WS_CLIPSIBLINGS = 0x4000000,
  WS_DISABLED = 0x8000000,
  WS_VISIBLE = 0x10000000,
  WS_MINIMIZE = 0x20000000,
  WS_ICONIC = 0x20000000,
  WS_CHILD = 0x40000000,
  WS_CHILDWINDOW = 0x40000000,
  WS_POPUP = 0x80000000,
  WS_POPUPWINDOW = 0x80880000,
};

/*   58 */
enum MACRO_DIG_USE_WAVEOUT
{
  DIG_USE_WAVEOUT = 15,
};

/*   59 */
enum HERO_FLAGS
{
  HERO_AT_SEA = 0x80,
};

/*   60 */
enum HERO_FLAGS_2
{
  HERO_VISITED_WELL = 0x10,
  HERO_ARMY_COMPACT = 0x80,
};

/*   61 */
enum BUILDINGS_BUILT
{
  BUILDING_RIGHT_TURRET_BUILT = 0x1,
  BUILDING_LEFT_TURRET_BUILT = 0x2,
  BUILDING_SPECIAL_DEFENSE_BUILT = 0x20,
};

/*   62 */
enum BUILDING_CODE : __int8
{
  BUILDING_MAGE_GUILD = 0x0,
  BUILDING_THIEVES_GUILD = 0x1,
  BUILDING_TAVERN = 0x2,
  BUILDING_DOCK = 0x3,
  BUILDING_WELL = 0x4,
  BUILDING_TENT = 0x5,
  BUILDING_CASTLE = 0x6,
  BUILDING_STATUE = 0x7,
  BUILDING_LEFT_TURRET = 0x8,
  BUILDING_RIGHT_TURRET = 0x9,
  BUILDING_MARKET = 0xA,
  BUILDING_SPECIAL_GROWTH = 0xB,
  BUILDING_MOAT = 0xC,
  BUILDING_SPECIAL = 0xD,
  BUILDING_BOAT = 0xE,
  BUILDING_CAPTAIN = 0xF,
  BUILDING_EXT_0 = 0x10,
  BUILDING_EXT_1 = 0x11,
  BUILDING_EXT_2 = 0x12,
  BUILDING_DWELLING_1 = 0x13,
  BUILDING_DWELLING_2 = 0x14,
  BUILDING_DWELLING_3 = 0x15,
  BUILDING_DWELLING_4 = 0x16,
  BUILDING_DWELLING_5 = 0x17,
  BUILDING_DWELLING_6 = 0x18,
  BUILDING_UPGRADE_1 = 0x19,
  BUILDING_UPGRADE_2 = 0x1A,
  BUILDING_UPGRADE_3 = 0x1B,
  BUILDING_UPGRADE_4 = 0x1C,
  BUILDING_UPGRADE_5 = 0x1D,
  BUILDING_UPGRADE_5B = 0x1E,
  BUILDING_EXT_3 = 0x1F,
};

/*   63 */
enum FACTION
{
  FACTION_KNIGHT = 0x0,
  FACTION_BARBARIAN = 0x1,
  FACTION_SORCERESS = 0x2,
  FACTION_WARLOCK = 0x3,
  FACTION_WIZARD = 0x4,
  FACTION_NECROMANCER = 0x5,
  FACTION_MULTIPLE = 0x6,
  FACTION_RANDOM = 0x7,
};

/*   64 */
enum HERO_TYPE
{
  HERO_TYPE_KNIGHT = 0x0,
  HERO_TYPE_BARBARIAN = 0x1,
  HERO_TYPE_SORCERESS = 0x2,
  HERO_TYPE_WARLOCK = 0x3,
  HERO_TYPE_WIZARD = 0x4,
  HERO_TYPE_NECROMANCER = 0x5,
  HERO_TYPE_KNIGHT_CAPTAIN = 0x6,
  HERO_TYPE_BARBARIAN_CAPTAIN = 0x7,
  HERO_TYPE_SORCERESS_CAPTAIN = 0x8,
  HERO_TYPE_WARLOCK_CAPTAIN = 0x9,
  HERO_TYPE_WIZARD_CAPTAIN = 0xA,
  HERO_TYPE_NECROMANCER_CAPTAIN = 0xB,
  HERO_TYPE_NONE = 0xFFFFFFFF,
};

/*   65 */
enum COMBAT_ICON_INDICES
{
  COMBAT_ICON_IDX_TEXTBAR = 0x1,
  COMBAT_ICON_IDX_CATAPULT = 0x3,
  COMBAT_ICON_IDX_CASTLE = 0x5,
  COMBAT_ICON_IDX_KEEP = 0x7,
  COMBAT_ICON_SPELLS = 0x8,
  COMBAT_ICON_MISC = 0x9,
  COMBAT_ICON_VIEW_ARMY = 0xA,
  COMBAT_ICON_MINI_LUCK_MORALE = 0xB,
  COMBAT_ICON_SPELL_INF = 0xC,
  COMBAT_ICON_MOAT_PART = 0xD,
  COMBAT_ICON_MOAT_WHOLE = 0xE,
};

/*   66 */
enum MOAT_STATUS
{
  MOAT_OPEN = 0x0,
  MOAT_CLOSING_1 = 0x1,
  MOAT_CLOSING_2 = 0x2,
  MOAT_DESTROYED = 0x3,
  MOAT_CLOSED = 0x4,
};

/*   67 */
enum TERRAIN_BMASK2 : __int32
{
  MASK_TERRAIN_WATER = 1,
  MASK_TERRAIN_GRASS = 2,
  MASK_TERRAIN_SNOW = 4,
  MASK_TERRAIN_SWAMP = 8,
  MASK_TERRAIN_LAVA = 16,
  MASK_TERRAIN_DESERT = 32,
  MASK_TERRAIN_DIRT = 64,
  MASK_TERRAIN_WASTELAND = 128,
  MASK_TERRAIN_BEACH = 256,
};

/*   68 */
enum TERRAIN_IDX
{
  TERRAIN_IDX_WATER = 0x0,
  TERRAIN_IDX_GRASS = 0x1,
  TERRAIN_IDX_SNOW = 0x2,
  TERRAIN_IDX_SWAMP = 0x3,
  TERRAIN_IDX_LAVA = 0x4,
  TERRAIN_IDX_DESERT = 0x5,
  TERRAIN_IDX_DIRT = 0x6,
  TERRAIN_IDX_WASTELAND = 0x7,
  TERRAIN_IDX_BEACH = 0x8,
};

/*   69 */
enum ANIMATION_TYPE
{
  ANIMATION_TYPE_START_MOVE = 0x0,
  ANIMATION_TYPE_SUB_START_MOVE = 0x1,
  ANIMATION_TYPE_MOVE = 0x2,
  ANIMATION_TYPE_SUB_END_MOVE = 0x3,
  ANIMATION_TYPE_END_MOVE = 0x4,
  ANIMATION_TYPE_WHOLE_MOVEMENT_CYCLE = 0x5,
  ANIMATION_TYPE_WALKING = 0x6,
  ANIMATION_TYPE_STANDING = 0x7,
  ANIMATION_TYPE_FIDGET_1 = 0x8,
  ANIMATION_TYPE_FIDGET_2 = 0x9,
  ANIMATION_TYPE_FIDGET_3 = 0xA,
  ANIMATION_TYPE_FIDGET_4 = 0xB,
  ANIMATION_TYPE_FIDGET_5 = 0xC,
  ANIMATION_TYPE_DYING = 0xD,
  ANIMATION_TYPE_WINCE = 0xE,
  ANIMATION_TYPE_WINCE_RETURN = 0xF,
  ANIMATION_TYPE_MELEE_ATTACK_UPWARDS = 0x10,
  ANIMATION_TYPE_MELEE_ATTACK_UPWARDS_RETURN = 0x11,
  ANIMATION_TYPE_TWO_HEX_ATTACK_UPWARDS = 0x12,
  ANIMATION_TYPE_TWO_HEX_ATTACK_UPWARDS_RETURN = 0x13,
  ANIMATION_TYPE_MELEE_ATTACK_FORWARDS = 0x14,
  ANIMATION_TYPE_MELEE_ATTACK_FORWARDS_RETURN = 0x15,
  ANIMATION_TYPE_TWO_HEX_ATTACK_FORWARDS = 0x16,
  ANIMATION_TYPE_TWO_HEX_ATTACK_FORWARDS_RETURN = 0x17,
  ANIMATION_TYPE_MELEE_ATTACK_DOWNWARDS = 0x18,
  ANIMATION_TYPE_MELEE_ATTACK_DOWNWARDS_RETURN = 0x19,
  ANIMATION_TYPE_TWO_HEX_ATTACK_DOWNWARDS = 0x1A,
  ANIMATION_TYPE_TWO_HEX_ATTACK_DOWNWARDS_RETURN = 0x1B,
  ANIMATION_TYPE_RANGED_ATTACK_UPWARDS = 0x1C,
  ANIMATION_TYPE_RANGED_ATTACK_UPWARDS_RETURN = 0x1D,
  ANIMATION_TYPE_RANGED_ATTACK_FORWARDS = 0x1E,
  ANIMATION_TYPE_RANGED_ATTACK_FORWARDS_RETURN = 0x1F,
  ANIMATION_TYPE_RANGED_ATTACK_DOWNWARDS = 0x20,
  ANIMATION_TYPE_RANGED_ATTACK_DOWNWARDS_RETURN = 0x21,
};

/*   70 */
enum ADVENTURE_MAP_LOCATION : __int8
{
  LOCATION_ALCHEMIST_LAB = 1,
  LOCATION_SIGN = 2,
  LOCATION_BUOY = 3,
  LOCATION_SKELETON = 4,
  LOCATION_DAEMON_CAVE = 5,
  LOCATION_TREASURE_CHEST = 6,
  LOCATION_FAERIE_RING = 7,
  LOCATION_CAMPFIRE = 8,
  LOCATION_FOUNTAIN = 9,
  LOCATION_GAZEBO = 10,
  LOCATION_ANCIENT_LAMP = 11,
  LOCATION_GRAVEYARD = 12,
  LOCATION_ARCHERS_HOUSE = 13,
  LOCATION_GOBLIN_HUT = 14,
  LOCATION_DWARF_COTTAGE = 15,
  LOCATION_PEASANT_HUT = 16,
  LOCATION_LOG_CABIN = 17,
  LOCATION_ROAD = 18,
  LOCATION_EVENT = 19,
  LOCATION_DRAGON_CITY = 20,
  LOCATION_LIGHTHOUSE = 21,
  LOCATION_WATERWHEEL = 22,
  LOCATION_MINE = 23,
  LOCATION_ARMY_CAMP = 24,
  LOCATION_OBELISK = 25,
  LOCATION_OASIS = 26,
  LOCATION_RESOURCE = 27,
  LOCATION_SPECIAL = 28,
  LOCATION_SAWMILL = 29,
  LOCATION_ORACLE = 30,
  LOCATION_SHRINE_FIRST = 31,
  LOCATION_SHIPWRECK = 32,
  LOCATION_SEA_CHEST = 33,
  LOCATION_DESRT_TENT = 34,
  LOCATION_TOWN = 35,
  LOCATION_STONE_LITHS = 36,
  LOCATION_WAGON_CAMP = 37,
  LOCATION_WELL = 38,
  LOCATION_WHIRLPOOL = 39,
  LOCATION_WINDMILL = 40,
  LOCATION_ARTIFACT = 41,
  LOCATION_HERO = 42,
  LOCATION_BOAT = 43,
  LOCATION_ULTIMATE_ARTIFACT = 44,
  LOCATION_RANDOM_ARTIFACT = 45,
  LOCATION_RANDOM_RESOURCE = 46,
  LOCATION_RANDOM_MONSTER = 47,
  LOCATION_RANDOM_TOWN = 48,
  LOCATION_RANDOM_CASTLE = 49,
  LOCATION_RANDOM_MONSTER_WEAK = 51,
  LOCATION_RANDOM_MONSTER_MEDIUM = 52,
  LOCATION_RANDOM_MONSTER_STRONG = 53,
  LOCATION_RANDOM_MONSTER_VERY_STRONG = 54,
  LOCATION_RANDOM_HERO = 55,
  LOCATION_NOTHING_SPECIAL = 56,
  LOCATION_WATCH_TOWER = 58,
  LOCATION_TREE_HOUSE = 59,
  LOCATION_TREE_CITY = 60,
  LOCATION_RUINS = 61,
  LOCATION_FORT = 62,
  LOCATION_TRADING_POST = 63,
  LOCATION_ABANDONED_MINE = 64,
  LOCATION_DWARF_CABIN = 65,
  LOCATION_STANDING_STONES = 66,
  LOCATION_IDOL = 67,
  LOCATION_TREE_OF_KNOWLEDGE = 68,
  LOCATION_WITCH_DOCTORS_HUT = 69,
  LOCATION_TEMPLE = 70,
  LOCATION_HILL_FORT = 71,
  LOCATION_HALFLING_HOLE = 72,
  LOCATION_MERCENARY_CAMP = 73,
  LOCATION_SHRINE_SECOND_ORDER = 74,
  LOCATION_SHRINE_THIRD_ORDER = 75,
  LOCATION_PYRAMID = 76,
  LOCATION_CITY_OF_DEAD = 77,
  LOCATION_EXCAVATION = 78,
  LOCATION_SPHINX = 79,
  LOCATION_WAGON = 80,
  LOCATION_TAR_PIT = 81,
  LOCATION_ARTESIAN_SPRING = 82,
  LOCATION_TROLL_BRIDGE = 83,
  LOCATION_WATERING_HOLE = 84,
  LOCATION_WITCH_HUT = 85,
  LOCATION_XANADU = 86,
  LOCATION_CAVE = 87,
  LOCATION_LEAN_TO = 88,
  LOCATION_MAGELLANS_MAPS = 89,
  LOCATION_FLOTSAM = 90,
  LOCATION_DERELICT_SHIP = 91,
  LOCATION_SHIPWRECK_SURVIVOR = 92,
  LOCATION_BOTTLE = 93,
  LOCATION_MAGIC_WELL = 94,
  LOCATION_MAGIC_GARDEN = 95,
  LOCATION_OBSERVATION_TOWER = 96,
  LOCATION_FREEMANS_FOUNDRY = 97,
  LOCATION_STREAM = 98,
  LOCATION_TREES = 99,
  LOCATION_MOUNTAINS = 100,
  LOCATION_VOLCANO = 101,
  LOCATION_FLOWERS = 102,
  LOCATION_ROCK = 103,
  LOCATION_LAKE = 104,
  LOCATION_MANDRAKE = 105,
  LOCATION_DEAD_TREE = 106,
  LOCATION_STUMP = 107,
  LOCATION_CRATER = 108,
  LOCATION_CACTUS = 109,
  LOCATION_MOUND = 110,
  LOCATION_DUNE = 111,
  LOCATION_LAVA_POOL = 112,
  LOCATION_SHRUB = 113,
  LOCATION_HOLE = 114,
  LOCATION_OUTCROPPING = 115,
  LOCATION_RANDOM_ARTIFACT_TREASURE = 116,
  LOCATION_RANDOM_ARTIFACT_MINOR = 117,
  LOCATION_RANDOM_ARTIFACT_MAJOR = 118,
  LOCATION_BARRIER = 119,
  LOCATION_TRAVELLER_TENT = 120,
  LOCATION_EXPANSION_DWELLING = 121,
  LOCATION_ALCHEMIST_TOWER = 122,
  LOCATION_JAIL = 123,
  TILE_HAS_EVENT = 128,
};

/*   71 */
enum RESOURCE
{
  RESOURCE_WOOD = 0x0,
  RESOURCE_MERCURY = 0x1,
  RESOURCE_ORE = 0x2,
  RESOURCE_SULFUR = 0x3,
  RESOURCE_CRYSTAL = 0x4,
  RESOURCE_GEMS = 0x5,
  RESOURCE_GOLD = 0x6,
};

/*   72 */
#pragma pack(push, 1)
struct CTRL_LOG
{
  int program[16];
  int pitch_l[16];
  int pitch_h[16];
  int c_lock[16];
  int c_prot[16];
  int c_mute[16];
  int c_v_prot[16];
  int bank[16];
  int gm_bank_l[16];
  int gm_bank_m[16];
  int indirect[16];
  int callback[16];
  int mod[16];
  int vol[16];
  int pan[16];
  int exp[16];
  int sus[16];
  int reverb[16];
  int chorus[16];
  int bend_range[16];
  int RPN_L[16];
  int RPN_M[16];
};
#pragma pack(pop)

/*   73 */
#pragma pack(push, 1)
struct _SEQUENCE
{
  char tag[4];
  void *driver;
  int status;
  void *TIMB;
  void *RBRN;
  void *EVNT;
  void *EVNT_ptr;
  void *ICA;
  void *prefix_callback;
  void *trigger_callback;
  void *beat_callback;
  void *EOS;
  int loop_count;
  int interval_count;
  int interval_num;
  int volume;
  int volume_target;
  int volume_accum;
  int volume_period;
  int tempo_percent;
  int tempo_target;
  int tempo_accum;
  int tempo_period;
  int tempo_error;
  int beat_count;
  int measure_count;
  int time_numerator;
  int time_fraction;
  int beat_fraction;
  int time_per_beat;
  void *FOR_ptrs[4];
  int FOR_loop_count[4];
  int chan_map[16];
  CTRL_LOG shadow;
  int note_count;
  int note_chan[32];
  int note_num[32];
  int note_time[32];
  int user_data[8];
  int system_data[8];
  int PREFIX_IsWin32s;
  int TRIGGER_IsWin32s;
  int BEAT_IsWin32s;
  int EOS_IsWin32s;
};
#pragma pack(pop)

/*   74 */
#pragma pack(push, 1)
struct tagLOGPALETTE
{
  __int16 palVersion;
  __int16 palNumEntries;
  PALETTEENTRY palPalEntry;
};
#pragma pack(pop)

/*   75 */
#pragma pack(push, 1)
struct waveformat_tag
{
  __int16 wFormatTag;
  __int16 nChannels;
  int nSamplesPerSec;
  int nAvgBytesPerSec;
  __int16 nBlockAlign;
};
#pragma pack(pop)

/*   76 */
#pragma pack(push, 1)
union _IMAGE_SECTION_HEADER$39DFBA39B6D121CDFC1ACE66C995549C
{
  int PhysicalAddress;
  int VirtualSize;
};
#pragma pack(pop)

/*   77 */
#pragma pack(push, 1)
struct IMAGE_DATA_DIRECTORY
{
  DWORD VirtualAddress;
  DWORD Length;
};
#pragma pack(pop)

/*   78 */
#pragma pack(push, 1)
struct IMAGE_OPTIONAL_HEADER32
{
  __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  int SizeOfCode;
  int SizeOfInitializedData;
  int SizeOfUninitializedData;
  int AddressOfEntryPoint;
  int BaseOfCode;
  int BaseOfData;
  int ImageBase;
  int SectionAlignment;
  int FileAlignment;
  __int16 MajorOperatingSystemVersion;
  __int16 MinorOperatingSystemVersion;
  __int16 MajorImageVersion;
  __int16 MinorImageVersion;
  __int16 MajorSubsystemVersion;
  __int16 MinorSubsystemVersion;
  int Win32VersionValue;
  int SizeOfImage;
  int SizeOfHeaders;
  int CheckSum;
  __int16 Subsystem;
  __int16 DllCharacteristics;
  int SizeOfStackReserve;
  int SizeOfStackCommit;
  int SizeOfHeapReserve;
  int SizeOfHeapCommit;
  int LoaderFlags;
  int NumberOfRvaAndSizes;
  IMAGE_DATA_DIRECTORY DataDirectory[16];
};
#pragma pack(pop)

/*   79 */
#pragma pack(push, 1)
struct IMAGE_FILE_HEADER
{
  __int16 Machine;
  __int16 NumberOfSections;
  int TimeDateStamp;
  int PointerToSymbolTable;
  int NumberOfSymbols;
  __int16 SizeOfOptionalHeader;
  __int16 Characteristics;
};
#pragma pack(pop)

/*   80 */
#pragma pack(push, 1)
struct _COMSTAT
{
  int fReserved;
  int cbInQue;
  int cbOutQue;
};
#pragma pack(pop)

/*   81 */
#pragma pack(push, 1)
struct _COMMTIMEOUTS
{
  int ReadIntervalTimeout;
  int ReadTotalTimeoutMultiplier;
  int ReadTotalTimeoutConstant;
  int WriteTotalTimeoutMultiplier;
  int WriteTotalTimeoutConstant;
};
#pragma pack(pop)

/*   82 */
#pragma pack(push, 1)
struct CursorHotspot
{
  char x;
  char y;
};
#pragma pack(pop)

/*   83 */
#pragma pack(push, 1)
struct CursorDimension
{
  char width;
  char height;
};
#pragma pack(pop)

/*   84 */
#pragma pack(push, 1)
struct Point16
{
  __int16 x;
  __int16 y;
};
#pragma pack(pop)

/*   85 */
#pragma pack(push, 1)
struct Dimension32
{
  int height;
  int width;
};
#pragma pack(pop)

/*   86 */
#pragma pack(push, 1)
struct spellMetadata
{
  char short_name[9];
  char level;
  char spriteIdx;
  char creatureEffectAnimationIdx;
  char field_C;
  char field_D;
  char cost;
  char field_F;
  char field_10;
  char field_11;
  char field_12;
  char field_13;
  char field_14;
  char attributes;
};
#pragma pack(pop)

/*   87 */
#pragma pack(push, 1)
struct creatureStats
{
  __int16 cost;
  int fight_value;
  char fight_value_aux;
  char growth;
  __int16 hp;
  char faction;
  char speed;
  char attack;
  char defense;
  char min_damage;
  char max_damage;
  char shots;
  char short_name[5];
  __int16 creature_flags;
  __int16 _;
};
#pragma pack(pop)

/*   88 */
#pragma pack(push, 1)
struct title_info
{
  char screenIdx;
  __int16 fieldID;
  void *contents;
};
#pragma pack(pop)

/*   89 */
#pragma pack(push, 1)
struct building_graphics_info
{
  char animationLength;
  __int16 x;
  __int16 y;
  __int16 width;
  __int16 height;
};
#pragma pack(pop)

/*   90 */
#pragma pack(push, 1)
struct building_cost
{
  int wood;
  int mercury;
  int ore;
  int sulfur;
  int crystal;
  int gems;
  int gold;
};
#pragma pack(pop)

/*   91 */
#pragma pack(push, 1)
struct sample_resource
{
  void *file;
  void *sample;
};
#pragma pack(pop)

/*   92 */
#pragma pack(push, 1)
struct primary_skills
{
  char attack;
  char defense;
  char spellpower;
  char knowledge;
  char _;
};
#pragma pack(pop)

/*   93 */
#pragma pack(push, 1)
struct primary_skill_chances
{
  char attackChance;
  char defenseChance;
  char spellpowerChance;
  char knowledgeChance;
};
#pragma pack(pop)

/*   94 */
#pragma pack(push, 1)
struct primary_skill_all_chances
{
  primary_skill_chances chancesForBeforeOrAfterLvl10[2];
};
#pragma pack(pop)

/*   95 */
#pragma pack(push, 1)
struct secondary_skill_chances
{
  char skill_chances[6];
};
#pragma pack(pop)

/*   96 */
#pragma pack(push, 1)
struct mouseManager
{
  float vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  bitmap *bitmap;
  int spriteIdx;
  icon *cursorIcon;
  MOUSE_CURSOR_CATEGORY cursorCategory;
  int cursorIdx;
  int field_4A;
  int field_4E;
  int field_52;
  int field_56;
  int field_5A;
  int cursorTopLeftX;
  int cursorTopLeftY;
  int field_66;
  int field_6A;
  int field_6E;
  int field_72;
  int cursorWidth;
  int cursorHeight;
  int field_7E;
  int couldBeShowMouse;
  int cursorDisabled;
};
#pragma pack(pop)

/*   97 */
#pragma pack(push, 1)
struct recruitUnit
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  int field_36;
  int creatureType;
  int field_3E;
  int field_42;
  int field_46;
  int field_4A;
  int field_4E;
  int field_52;
  int field_56;
  armyGroup *army;
  int field_5E;
  int field_62;
  int field_66;
  int available;
  int field_6E;
  int field_72;
  int field_76;
  int field_7A;
};
#pragma pack(pop)

/*   98 */
#pragma pack(push, 1)
struct inputManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  tag_message inputInstances[64];
  int currentInputEvt;
  int currentInfoField;
  int readingInputMutex;
  int field_742;
  int field_746;
  int field_74A;
  __int16 keycodeRelated[128];
  int field_84E;
  int field_852;
  int normalizingKeycodeRelated;
  int field_85A;
  int forSettingBitmask;
  int field_862;
  int field_866;
};
#pragma pack(pop)

/*   99 */
#pragma pack(push, 1)
struct BuildingDisplay
{
  int animationLength;
  int animationIdx;
  int built;
  int buildingCode;
  icon *icon;
  border *guiElement;
};
#pragma pack(pop)

/*  100 */
#pragma pack(push, 1)
struct Bankbox
{
  void *player;
  __int16 x;
  __int16 y;
  void *window;
};
#pragma pack(pop)

/*  101 */
#pragma pack(push, 1)
struct ArmyDisplay
{
  void *window;
  char _1[24];
  int x;
  int y;
  int field_24;
  int drawBorder;
  void *field_2C[6];
  void *stripIcon;
  void *creaturePortraits[5];
  int creatureTypes[5];
  void *portraitIcon;
  void *portraitFlagIcon;
  int portraitIconIdx;
  int field_7C;
  void *army;
};
#pragma pack(pop)

/*  102 */
#pragma pack(push, 1)
struct townManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  town *castle;
  icon *couldBeBackground;
  BuildingDisplay *buildingDisplays[32];
  int curBuilding;
  int factionID;
  int field_C6;
  heroWindow *townScreen;
  strip *garrisonDisplay;
  strip *visitingArmyDisplay;
  strip *field_D6;
  int field_DA;
  strip *field_DE;
  int field_E2;
  strip *field_E6;
  int field_EA;
  bankBox *bankbox;
  char infoMessage[80];
  int field_142;
  int field_146;
  int field_14A;
  int field_14E;
  int field_152;
  int field_156;
  int field_15A;
  int field_15E;
  heroWindow *curScreen;
  heroWindow *dialog;
  int field_16A;
  int field_16E;
  int recruitHeroConfirmed;
  hero *heroBeingRecruited;
};
#pragma pack(pop)

/*  103 */
#pragma pack(push, 1)
struct advManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  int field_36;
  widget *someComponents[2][12];
  heroWindow *adventureScreen;
  int sizeOfSomethingMapRelated;
  int field_A2;
  int currentTerrain;
  int field_AA;
  fullMap *map;
  iconWidget *heroScrollbarKnob;
  iconWidget *castleScrollbarKnob;
  int field_BA;
  int field_BE;
  tileset *groundTileset;
  tileset *clofTileset;
  tileset *stonTileset;
  int field_CE[64];
  icon *radarIcon;
  icon *clopIcon;
  int viewX;
  int viewY;
  char _2[24];
  int field_1F6;
  int field_1FA;
  int field_1FE;
  int field_202;
  int field_206;
  int field_20A;
  int field_20E;
  int field_212;
  int field_216;
  void *heroIcons[6];
  icon *boatIcon;
  icon *frothIcon;
  icon *shadowIcon;
  icon *boatShadowIcon;
  void *flagIcons1[6];
  void *flagIcons2[6];
  int field_272;
  int field_276;
  int field_27A;
  int field_27E;
  int field_282;
  int field_286;
  int field_28A;
  int field_28E;
  char field_292[20];
  int field_2A6;
  int field_2AA;
  int field_2AE;
  int field_2B2;
  int field_2B6;
  int field_2BA;
  int field_2BE;
  int field_2C2[4][2];
  void *loopSamples[28];
  sample *walkSamples[9];
  int identifyCast;
  int field_37A;
};
#pragma pack(pop)

/*  104 */
#pragma pack(push, 1)
struct mapCell
{
  __int16 groundIndex;
  char bitfield_1_hasObject_1_isRoad_6_objTileset;
  __int8 objectIndex;
  unsigned __int16 field_4_1_1_isShadow_1_13_extraInfo;
  char field__1_hasOverlay_1_hasLateOverlay_6_overlayTileset;
  char overlayIndex;
  char displayFlags;
  char objType;
  __int16 extraIdx;
  int objLink;
  int ovrLink;
};
#pragma pack(pop)

/*  105 */

/*  106 */
#pragma pack(push, 1)
struct hexcell
{
  __int16 centerX;
  __int16 occupyingCreatureBottomY;
  __int16 leftX;
  __int16 topY;
  __int16 rightX;
  __int16 otherY1;
  __int16 otherY2;
  char isBlocked;
  char combatObjIdx;
  char unitOwner;
  signed __int8 stackIdx;
  char isOccupierNonPrimaryHex;
  int numCorpses;
  char corpseOwners[14];
  char corpseStackIndices[14];
  char field_33[14];
  char field_41;
  H2RECT drawingBounds;
  char field_52[16];
};
#pragma pack(pop)

/*  107 */
#pragma pack(push, 1)
struct combatManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  palette *palette;
  char _1[768];
  char combatMessageRow1[120];
  char combatMessageRow2[120];
  char field_42A[117];
  char field_49F[117];
  hexcell combatGrid[117];
  int terrainType;
  int combatFieldFringeID;
  int field_31E6;
  int field_31EA;
  int field_31EE;
  int combatFieldCoverID;
  icon *combatScreenIcons[15];
  icon *combatObjIcons[8];
  int numCombatObjs;
  __int16 eagleEyeSpellLearned[2];
  int drawBridgePosition;
  int hasMoat;
  char turretStatus[4];
  char wallStatus[4];
  char ballistaDestroyed;
  bitmap *couldBeBitmapForFieldItself;
  bitmap *probablyBitmapForCombatScreen;
  bitmap *bitmap1;
  int zeroedAfterAnimatingDeathAndHolySpells;
  int field_327B;
  town *castles[2];
  hero *heroes[2];
  hero captains;
  int heroSpellpowers[2];
  armyGroup *armies[2];
  int shadedHex;
  char field_339D[2];
  char field_339F[2];
  char field_33A1;
  char field_33A2;
  char field_33A3[2];
  int heroIconIdxRelated[2];
  int countRelatedToSpellAnimation[2];
  int heroType[2];
  int field_33BD[2];
  icon *heroIcon[2];
  icon *heroFlagIcon[2];
  int heroFlagIconIdx[2];
  H2RECT heroBounds[2];
  H2RECT heroFlagBounds[2];
  H2RECT moatPartBounds[9];
  int otherCombatMessageRelatedTime;
  int combatMessageRelatedTime;
  int couldBeShouldResetCombatMessage;
  char _7[100];
  char summonedCreatureType[2];
  int field_351F[2];
  int involvedInBadMorale[2];
  int playerID[2];
  int experienceForDefeating[2];
  int field_353F;
  int field_3543;
  int numCreatures[2];
  army creatures[2][21];
  int otherCurrentSideThing;
  int someSortOfStackIdx;
  int field_F2AB;
  int currentActionSide;
  int field_F2B3;
  int field_F2B7;
  int field_F2BB;
  int field_F2BF;
  int field_F2C3;
  int field_F2C7;
  int field_F2CB;
  int field_F2CF;
  H2RECT catapultBounds;
  H2RECT ballistaBounds;
  H2RECT drawbridgeBounds;
  H2RECT field_F303;
  int probablyCatapultImgIdx[2];
  char _11[8];
  int timesCatapultMustFire[2];
  int timesGarrisonMustFire[2];
  int isCastleBattle;
  char _12[20];
  int zeroedInHandleCatapult1;
  int zeroedInHandleCatapult2;
  float field_F353;
  int field_F357;
  int field_F35B;
  float ghostAndVampireAbilityStrength[2];
  heroWindow *window;
  int field_F36B;
  int field_F36F;
  int field_F373;
  int field_F377[2];
  signed int stuffHappenedToCreature[2][20];
  int field_F41F;
  int field_F423;
  int field_F427[2];
  int field_F42F;
  char _14[160];
  int sideCasualtiesTitleTextWidget[2];
  textWidget *battlefieldCasualtiesTextWidget;
  char _15[116];
  int field_F553;
  int field_F557;
  char _16[28];
  char shouldVanish[2][20];
  char anyStacksShouldVanish;
  char combatBackgroundFilename[13];
  char hexNeighbors[117][6];
  heroWindow *combatEndWindow;
  int current_spell_id;
  int winningSide;
};
#pragma pack(pop)

/*  108 */
#pragma pack(push, 1)
struct army
{
  char mightBeIsAttacking;
  char animatingRangedAttack;
  char mightBeAttackAnimIdx;
  char field_3;
  char field_4;
  char field_5;
  int field_6;
  H2RECT stackSizeDispBounds;
  H2RECT field_1A;
  H2RECT bounds;
  H2RECT effectAnimationBounds;
  int curFidget;
  float field_4E;
  int targetOwner;
  int targetStackIdx;
  int targetNeighborIdx;
  int field_5E;
  int targetHex;
  int probablyIsNeedDrawSpellEffect;
  int mirroredIdx;
  int mirrorIdx;
  int lifespan;
  int creatureIdx;
  int occupiedHex;
  int animationType;
  int animationFrame;
  int facingRight;
  int field_8A;
  int field_8E;
  int initialQuantity;
  int quantity;
  unsigned int previousQuantity;
  int temporaryQty;
  int damage;
  int armyIdx;
  int otherBadLuckThing;
  int speed;
  int field_B2;
  int luckStatus;
  tag_monsterInfo creature;
  __int16 field_D4;
  int damageTakenDuringSomeTimePeriod;
  int hasTakenLosses;
  int dead;
  int spellEnemyCreatureAbilityIsCasting;
  int owningSide;
  int stackIdx;
  int baseFidgetTime;
  int morale;
  int luck;
  int field_FA;
  int yDrawOffset;
  int xDrawOffset;
  int numActiveEffects;
  char effectStrengths[19];
  int field_11D;
  int hitByHydraAttack;
  void *field_125;
  SMonFrameInfo frameInfo;
  icon *creatureIcon;
  icon *missileIcon;
  sample *combatSounds[7];
};
#pragma pack(pop)

/*  109 */
#pragma pack(push, 1)
struct SMonFrameInfo
{
  char firstByteIgnored;
  __int16 offsetForBlind[2];
  char startMoveAnimInfoIgnored[16];
  char subStartMoveInfoIgnored[16];
  char mainMoveAnimInfoIgnored[16];
  char subEndMoveAnimInfoIgnored[16];
  char endMoveAnimInfoIgnored[16];
  char fullMoveAnimInfoIgnored[16];
  char moveAnimInfoIgnored[16];
  char numberOfFidgets;
  float fidgetProbabilities[5];
  int fidgetInfoIgnored[5];
  int maxFidgetDelay;
  int stepTime;
  int shootingTime;
  int flightSpeed;
  __int16 projectileStartOffset[3][2];
  char numMissileDirs;
  float projDirAngle[12];
  int stackNumDispXShift[2];
  char animationLengths[34];
  char animationFrameToImgIdx[34][16];
};
#pragma pack(pop)

/*  110 */
#pragma pack(push, 1)
struct armyGroup
{
  char creatureTypes[5];
  __int16 quantities[5];
};
#pragma pack(pop)

/*  111 */
#pragma pack(push, 1)
struct hero
{
  __int16 spellpoints;
  char idx;
  char ownerIdx;
  char field_4;
  char field_5;
  char field_6;
  char field_7;
  char field_8;
  char field_9;
  char name[13];
  char factionID;
  char heroID;
  int x;
  int y;
  __int16 field_21;
  __int16 field_23;
  __int16 field_25;
  __int16 field_27;
  __int16 field_29;
  __int16 field_2B;
  __int16 occupiedObjType;
  __int16 occupiedObjVal;
  int remainingMobility;
  int mobility;
  int experience;
  __int16 oldLevel;
  char primarySkills[4];
  char field_43;
  char tempMoraleBonuses;
  char tempLuckBonuses;
  char _2[30];
  char wisdomLastOffered;
  armyGroup army;
  char secondarySkillLevel[14];
  char skillIndex[14];
  int numSecSkillsKnown;
  char spellsLearned[65];
  char artifacts[14];
  char flags1;
  char flags2;
  char flags3;
  char flags4;
  char isCaptain;
  int field_E8;
  char scrollSpell[14];
};
#pragma pack(pop)

/*  112 */
#pragma pack(push, 1)
struct searchArray
{
  int field_0;
  int field_4;
  int field_8;
  char _1[8];
  PathfindingInfo mainDataStructure[1024];
  PathfindingInfo *field_2414;
  int field_2418;
  int field_241C[63];
};
#pragma pack(pop)

/*  113 */
#pragma pack(push, 1)
struct struc_probably_defunct
{
  __int16 tileType;
  __int16 field_2;
  __int16 field_4;
  __int16 field_6;
  __int16 field_8;
  __int16 field_A;
};
#pragma pack(pop)

/*  114 */
#pragma pack(push, 1)
struct fullMap
{
  mapCell *tiles;
  mapCellExtra *cellExtras;
  int width;
  int height;
  int numCellExtras;
};
#pragma pack(pop)

/*  115 */
#pragma pack(push, 1)
struct playerData
{
  char color;
  char numHeroes;
  char curHeroIdx;
  char field_3;
  char heroesOwned[8];
  char heroesForPurchase[2];
  char _2;
  int personality;
  char _3[45];
  char field_40;
  __int16 field_41;
  char field_43;
  char numCastles;
  __int16 field_45;
  char castlesOwned[72];
  int resources[7];
  char _4[111];
  char field_11A;
};
#pragma pack(pop)

/*  116 */
#pragma pack(push, 1)
struct game
{
  __int16 field_0;
  char field_2;
  char field_3;
  char field_4;
  char _1[325];
  char lastSaveFile[251];
  char _11[125];
  char field_2C2;
  char field_2C3;
  char field_2C4;
  char field_2C5;
  char winConditionType;
  char field_2C7;
  char allowDefeatAllVictory;
  __int16 winConditionArgument;
  char _2[10];
  __int16 victoryCastleY;
  char _3[380];
  char playerHandicap[6];
  char field_459[6];
  char field_45F[6];
  char difficulty;
  char _5[40];
  char numPlayers;
  char couldBeNumDefeatedPlayers;
  char playerAlive[6];
  __int16 day;
  __int16 week;
  __int16 month;
  playerData players[6];
  fullMap map;
  char numObelisks;
  town castles[72];
  char _7[81];
  hero heroes[54];
  char relatedToHeroForHireStatus[54];
  char _8[1152];
  char artifaceGeneratedRandomly[103];
  boat boats[48];
  char boatBuilt[48];
  char obeliskVisitedMasks[48];
  char _10[652];
  int (__thiscall *callback)(tag_message *);
  __int16 field_660D;
};
#pragma pack(pop)

/*  117 */

/*  118 */
#pragma pack(push, 1)
struct resourceManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  MANAGER_TYPE type;
  int idx;
  char name[30];
  int ready;
  resource *firstLoadedResource;
  int numOpenAGGFiles;
  int curHandleIdx;
  int fileDescriptors[2];
  AggregateHeader *aggContentInfo[2];
  int numberOfFilesInAGG[2];
  int expunging;
  int field_5E;
  char resourceToLoad[60];
  int fileID;
};
#pragma pack(pop)

/*  119 */
#pragma pack(push, 1)
struct ResourceVtable
{
  void *cleanUp;
};
#pragma pack(pop)

/*  120 */
#pragma pack(push, 1)
struct ManagerVtable
{
  void *initialize;
  void *cleanUp;
  void *handleInput;
};
#pragma pack(pop)

/*  121 */
#pragma pack(push, 1)
struct MemoryBlockInfo
{
  char initialized;
  int contents;
  int len;
  char src_file_of_loading[61];
  int lineno_of_loading;
};
#pragma pack(pop)

/*  122 */
#pragma pack(push, 1)
struct AggregateHeader
{
  int id;
  int off;
  int length;
};
#pragma pack(pop)

/*  123 */
#pragma pack(push, 1)
struct bitmap
{
  resourceVtable *vtable;
  RESOURCE_TYPE resourceType;
  __int16 referenceCount;
  int fileID;
  int next;
  __int16 setInConstructor;
  __int16 width;
  __int16 height;
  char *contents;
};
#pragma pack(pop)

/*  124 */
#pragma pack(push, 1)
struct icon
{
  resourceVtable *vtable;
  RESOURCE_TYPE resourceType;
  __int16 referenceCount;
  int fileID;
  resource *next;
  __int16 numSprites;
  IconEntry *headersAndImageData;
};
#pragma pack(pop)

/*  125 */
#pragma pack(push, 1)
struct Sequence
{
  void *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  void *next;
  void *contents;
  void *field_14;
  int field_18;
  int field_1C;
};
#pragma pack(pop)

/*  126 */
#pragma pack(push, 1)
struct sample
{
  resourceVtable *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  resource *next;
  int field_10;
  void *contents;
  int nbytes;
  int codeThing;
  unsigned int playbackRate;
  unsigned int sampleType;
  unsigned int field_28;
  int loopCount;
};
#pragma pack(pop)

/*  127 */
#pragma pack(push, 1)
struct Palette
{
  void *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  int next;
  void *contents;
};
#pragma pack(pop)

/*  128 */
#pragma pack(push, 1)
struct Font
{
  void *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  int next;
  int lineHeight;
  int whetherFirstShortIsMoreThan13;
  int field_18;
  void *icon;
};
#pragma pack(pop)

/*  129 */
#pragma pack(push, 1)
struct Tileset
{
  void *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  void *next;
  __int16 field_10;
  __int16 field_12;
  __int16 field_14;
  void *contents;
};
#pragma pack(pop)

/*  130 */
#pragma pack(push, 1)
struct AbstractResource
{
  void *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  void *next;
};
#pragma pack(pop)

/*  131 */
#pragma pack(push, 1)
struct heroWindow
{
  int idx;
  heroWindow *nextWindow;
  heroWindow *prevWindow;
  char filename[20];
  int flags1;
  int flags2;
  int xOffset;
  int yOffset;
  int width;
  int height;
  widget *lastWidget;
  widget *firstWidget;
  bitmap *bitmap;
};
#pragma pack(pop)

/*  132 */
#pragma pack(push, 1)
struct TextEntry
{
  int vtable;
  void *parentWindow;
  int nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 field_12;
  __int16 field_14;
  __int16 field_16;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  void *ptrToFifthShortPlusFiveManyBytes;
  int font;
  __int16 field_28;
  char field_2A;
  int icon;
  __int16 field_2F;
  __int16 field_31;
  __int16 fifthShort;
  __int16 field_35;
  __int16 field_37;
  __int16 field_39;
  __int16 field_3B;
  __int16 field_3D;
  __int16 field_3F;
  __int16 field_41;
  __int16 field_43;
  __int16 _1;
  __int16 field_47;
  __int16 type;
  __int16 field_4B;
  char _2;
};
#pragma pack(pop)

/*  133 */
#pragma pack(push, 1)
struct TextWidget
{
  void *vtable;
  void *parentWindow;
  int nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 field_12;
  __int16 field_14;
  __int16 field_16;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  void *content;
  void *font;
  __int16 field_28;
  char field_2A;
};
#pragma pack(pop)

/*  134 */
#pragma pack(push, 1)
struct Button
{
  void *vtable;
  void *parentWindow;
  int nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 field_12;
  __int16 field_14;
  int flags;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  void *icon;
  __int16 normalImageIdx;
  __int16 armedImageIdx;
  __int16 field_28;
  __int16 field_2A;
  int icnFileID;
};
#pragma pack(pop)

/*  135 */
#pragma pack(push, 1)
struct BackgroundGUI
{
  void *vtable;
  void *parentWindow;
  void *nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 field_12;
  __int16 backgroundType;
  __int16 flagsRelatedToShouldDisplayAndPerhapsMouseCode;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  void *bitmap;
  void *icon;
  __int16 color;
};
#pragma pack(pop)

/*  136 */
#pragma pack(push, 1)
struct ListBox
{
  int vtable;
  void *parentWindow;
  int nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 field_12;
  __int16 field_14;
  __int16 field_16;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  int fontID;
  void *icon;
  __int16 field_28;
  __int16 field_2A;
  __int16 field_2C;
  __int16 field_2E;
  __int16 field_30;
  __int16 field_32;
  __int16 field_34;
  __int16 field_36;
  __int16 field_38;
  __int16 field_3A;
  __int16 field_3C;
  __int16 field_3E;
  __int16 field_40;
  __int16 field_42;
  __int16 field_44[23];
  __int16 field_72[15];
};
#pragma pack(pop)

/*  137 */
#pragma pack(push, 1)
struct GUIIcon
{
  void *vtable;
  void *parentWindow;
  void *nextInLinkedList;
  void *prevInLinkedList;
  __int16 fieldID;
  __int16 componentIndex;
  __int16 field_14;
  __int16 field_16;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  void *icon;
  __int16 imgIdx;
  char mirror;
  __int16 field_27;
  int iconFileID;
};
#pragma pack(pop)

/*  138 */
#pragma pack(push, 1)
struct AbstractGUIComponent
{
  void *vtable;
  void *parentWindow;
  void *nextInLinkedList;
  void *prevInLinkedList;
  __int16 fieldID;
  __int16 componentIndex;
  __int16 field_14;
  __int16 field_16;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
};
#pragma pack(pop)

/*  140 */
#pragma pack(push, 1)
struct tag_message
{
  INPUT_EVENT_CODE eventCode;
  int xCoordOrKeycode;
  int yCoordOrFieldID;
  int inputTypeBitmask;
  int altXCoord;
  int altYCoord;
  void *payload;
};
#pragma pack(pop)

/*  141 */
#pragma pack(push, 1)
struct tag_message
{
  INPUT_EVENT_CODE eventCode;
  int xCoordOrKeycode;
  int yCoordOrFieldID;
  int inputTypeBitmask;
  int altXCoord;
  int altYCoord;
  void *payload;
};
#pragma pack(pop)

/*  142 */
#pragma pack(push, 1)
struct AbstractGUIComponentVtable
{
  void *paint;
  void *cleanUp;
  void *handleEvent;
};
#pragma pack(pop)

/*  143 */
#pragma pack(push, 1)
struct _DCB
{
  int DCBlength;
  int BaudRate;
  int fDummy2;
  __int16 wReserved;
  __int16 XonLim;
  __int16 XoffLim;
  char ByteSize;
  char Parity;
  char StopBits;
  char XonChar;
  char XoffChar;
  char ErrorChar;
  char EofChar;
  char EvtChar;
  __int16 wReserved1;
};
#pragma pack(pop)

/*  144 */
#pragma pack(push, 1)
struct PAINTSTRUCT
{
  void *hdc;
  int fErase;
  RECT rcPaint;
  int fRestore;
  int fIncUpdate;
  char rgbReserved[32];
};
#pragma pack(pop)

/*  145 */
#pragma pack(push, 1)
struct H2RECT
{
  LONG left;
  LONG right;
  LONG top;
  LONG bottom;
};
#pragma pack(pop)

/*  146 */
#pragma pack(push, 1)
struct MSG
{
  void *hwnd;
  int message;
  int wParam;
  int lParam;
  int time;
  POINT pt;
};
#pragma pack(pop)

/*  147 */
#pragma pack(push, 1)
struct _RTL_CRITICAL_SECTION
{
  void *DebugInfo;
  int LockCount;
  int RecursionCount;
  void *OwningThread;
  void *LockSemaphore;
  int SpinCount;
};
#pragma pack(pop)

/*  148 */
#pragma pack(push, 1)
struct _NCB
{
  char ncb_command;
  char ncb_retcode;
  char ncb_lsn;
  char ncb_num;
  void *ncb_buffer;
  __int16 ncb_length;
  char ncb_callname[16];
  char ncb_name[16];
  char ncb_rto;
  char ncb_sto;
  void *ncb_post;
  char ncb_lana_num;
  char ncb_cmd_cplt;
  char ncb_reserve[10];
  void *ncb_event;
};
#pragma pack(pop)

/*  149 */
#pragma pack(push, 1)
struct in_addrC13EC994467D6E67044F092615EC7EA94DE764E669F663DACA3CBFDE73714CB5
{
  u_short s_w1;
  u_short s_w2;
};
#pragma pack(pop)

/*  150 */
#pragma pack(push, 1)
struct in_addrC13EC994467D6E67044F092615EC7EA901C175C1F0716DCA00314EDD79DBC0A0
{
  u_char s_b1;
  u_char s_b2;
  u_char s_b3;
  u_char s_b4;
};
#pragma pack(pop)

/*  151 */
#pragma pack(push, 1)
union in_addrC13EC994467D6E67044F092615EC7EA9
{
  u_long S_un_b;
  in_addrC13EC994467D6E67044F092615EC7EA94DE764E669F663DACA3CBFDE73714CB5 S_un_w;
  int S_addr;
};
#pragma pack(pop)

/*  152 */
#pragma pack(push, 1)
struct in_addr
{
  in_addrC13EC994467D6E67044F092615EC7EA9 S_un;
};
#pragma pack(pop)

/*  153 */
#pragma pack(push, 1)
struct sockaddr
{
  __int16 sa_family;
  char sa_data[14];
};
#pragma pack(pop)

/*  154 */
#pragma pack(push, 1)
struct WSAData
{
  __int16 wVersion;
  __int16 wHighVersion;
  char szDescription[257];
  char szSystemStatus[129];
  __int16 iMaxSockets;
  __int16 iMaxUdpDg;
  char gap_18A[2];
  void *lpVendorInfo;
};
#pragma pack(pop)

/*  155 */
#pragma pack(push, 1)
struct tagAUXCAPSA
{
  __int16 wMid;
  __int16 wPid;
  int vDriverVersion;
  char szPname[32];
  __int16 wTechnology;
  __int16 wReserved1;
  int dwSupport;
};
#pragma pack(pop)

/*  156 */
#pragma pack(push, 1)
struct IMAGE_DOS_HEADER
{
  __int16 e_magic;
  __int16 e_cblp;
  __int16 e_cp;
  __int16 e_crlc;
  __int16 e_cparhdr;
  __int16 e_minalloc;
  __int16 e_maxalloc;
  __int16 e_ss;
  __int16 e_sp;
  __int16 e_csum;
  __int16 e_ip;
  __int16 e_cs;
  __int16 e_lfarlc;
  __int16 e_ovno;
  __int16 e_res[4];
  __int16 e_oemid;
  __int16 e_oeminfo;
  __int16 e_res2[10];
  int e_lfanew;
};
#pragma pack(pop)

/*  157 */
#pragma pack(push, 1)
struct IMAGE_NT_HEADERS
{
  int Signature;
  IMAGE_FILE_HEADER FileHeader;
  IMAGE_OPTIONAL_HEADER32 OptionalHeader;
};
#pragma pack(pop)

/*  158 */
#pragma pack(push, 1)
struct IMAGE_SECTION_HEADER
{
  char Name[8];
  _IMAGE_SECTION_HEADER$39DFBA39B6D121CDFC1ACE66C995549C Misc;
  int VirtualAddress;
  int SizeOfRawData;
  int PointerToRawData;
  int PointerToRelocations;
  int PointerToLinenumbers;
  __int16 NumberOfRelocations;
  __int16 NumberOfLinenumbers;
  int Characteristics;
};
#pragma pack(pop)

/*  159 */
#pragma pack(push, 1)
struct type_info
{
  void *vftable;
  int _m_data;
  char _m_d_name[];
};
#pragma pack(pop)

/*  160 */
#pragma pack(push, 1)
struct PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};
#pragma pack(pop)

/*  161 */
#pragma pack(push, 1)
struct MainWindow
{
  unsigned int showMenu;
  signed int x;
  signed int y;
  unsigned int width;
  unsigned int height;
  unsigned int fullScreen;
  unsigned int colorMouseCursor;
};
#pragma pack(pop)

/*  162 */
#pragma pack(push, 1)
struct PaletteContents
{
  RGB colors[256];
};
#pragma pack(pop)

/*  163 */
#pragma pack(push, 1)
struct RGB
{
  char red;
  char green;
  char blue;
};
#pragma pack(pop)

/*  164 */
#pragma pack(push, 1)
struct ICNHeader
{
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  char field_8;
  int off;
};
#pragma pack(pop)

/*  165 */
#pragma pack(push, 1)
struct HeroWindowManager
{
  void *vtable;
  void *next;
  void *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  void *firstWindow;
  void *lastWindow;
  void *topmostWindow;
  void *nextTopmostWindow;
  void *screenBuffer;
  void *someBMP;
  int field_4E;
  int numScreenshots;
  int field_56;
  int buttonPressedCode;
  int field_5E;
};
#pragma pack(pop)

/*  166 */
#pragma pack(push, 1)
struct IDirectDraw
{
  void *lpVtbl;
};
#pragma pack(pop)

/*  167 */
#pragma pack(push, 1)
struct Castle
{
  char idx;
  char ownerIdx;
  char alignment;
  char factionID;
  char field_4;
  char field_5;
  __int16 field_6;
  char gap_8[15];
  char visitingHeroIdx;
  int buildingsBuiltFlags;
  char mageGuildLevel;
  char field_1D;
  __int16 numCreaturesInDwelling[12];
  char _1;
  char mayNotBeUpgradedToCastle;
  char _2[4];
  char mageGuildSpells[20];
  char numSpellsOfLevel[5];
  __int16 field_55;
  char name[12];
  char field_63;
};
#pragma pack(pop)

/*  168 */
#pragma pack(push, 1)
struct PathfindingInfo
{
  char field_0;
  char field_1;
  __int16 field_2;
  char field_4;
  int field_5;
};
#pragma pack(pop)

/*  169 */
#pragma pack(push, 1)
struct CombatObj
{
  int terrains;
  char visualHeight;
  char numBlocked;
  char hexOffs[8];
};
#pragma pack(pop)

/*  170 */
#pragma pack(push, 1)
struct CombatCover
{
  TERRAIN_BMASK2 terrains;
  char coveredHexes[15];
};
#pragma pack(pop)

/*  171 */
#pragma pack(push, 1)
struct executive
{
  baseManager *firstManager;
  baseManager *lastManager;
  baseManager *currentManager;
  _DWORD field_C;
};
#pragma pack(pop)

/*  172 */
#pragma pack(push, 1)
struct eventsManager
{
  void *vftable;
  void *next;
  void *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  icon *overlayIcn;
};
#pragma pack(pop)

/*  173 */
#pragma pack(push, 1)
struct editManager
{
  void *vtable;
  void *next;
  void *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  int curToolBoxNo;
  icon *radarIcons;
  icon *editButtonIcons;
  Tileset *groundTileset;
  int field_46;
  Tileset *clof32Tileset;
  int field_4E;
  icon *overlayIcons[64][2];
  GUIIcon *horizontalScrollBar;
  GUIIcon *verticalScrollBar;
  GUIIcon *horizontalScrollHandle;
  GUIIcon *verticalScrollHandle;
  int zoomLevel;
  int setOnEventUpdate;
  int field_26A;
  int field_26E;
  int field_272;
  int brushSize;
  int field_27A;
  int field_27E;
  int field_282;
  int toolManager;
  heroWindow *editWindow;
  int nMapExtra;
  __int16 lenMapExtra[512];
  void *mapExtra[512];
  int cellLeft;
  int cellTop;
  int cursorX;
  int cursorY;
};
#pragma pack(pop)

/*  174 */
#pragma pack(push, 1)
struct MapMetaInfo
{
  char _1[6];
  char width;
  char height;
  char _2[50];
  char name[60];
  char description[298];
  int field_1A0;
};
#pragma pack(pop)

/*  175 */
#pragma pack(push, 1)
struct widget
{
  widgetVtable *vtable;
  heroWindow *parentWindow;
  widget *nextInLinkedList;
  widget *prevInLinkedList;
  __int16 fieldID;
  __int16 componentIndex;
  __int16 field_14;
  __int16 flags;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
};
#pragma pack(pop)

/*  176 */
#pragma pack(push, 1)
struct button
{
  widgetVtable *vtable;
  heroWindow *parentWindow;
  int nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 field_12;
  __int16 field_14;
  BUTTON_FLAGS flags;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  icon *icon;
  __int16 normalImageIdx;
  __int16 armedImageIdx;
  __int16 field_28;
  __int16 field_2A;
  int icnFileID;
};
#pragma pack(pop)

/*  177 */
#pragma pack(push, 1)
struct textWidget
{
  widgetVtable *vtable;
  heroWindow *parentWindow;
  int nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 field_12;
  __int16 field_14;
  __int16 field_16;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  char *content;
  font *font;
  __int16 field_28;
  char field_2A;
};
#pragma pack(pop)

/*  178 */
#pragma pack(push, 1)
struct textEntryWidget
{
  int vtable;
  heroWindow *parentWindow;
  int nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 field_12;
  __int16 field_14;
  __int16 field_16;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  void *ptrToFifthShortPlusFiveManyBytes;
  int font;
  __int16 field_28;
  char field_2A;
  int icon;
  __int16 field_2F;
  __int16 field_31;
  __int16 fifthShort;
  __int16 field_35;
  __int16 field_37;
  __int16 field_39;
  __int16 field_3B;
  __int16 field_3D;
  __int16 field_3F;
  __int16 field_41;
  __int16 field_43;
  __int16 field_45;
  __int16 field_47;
  __int16 type;
  __int16 field_4B;
  char _2;
};
#pragma pack(pop)

/*  179 */
#pragma pack(push, 1)
struct heroWindow
{
  int idx;
  heroWindow *nextWindow;
  heroWindow *prevWindow;
  char filename[20];
  int flags1;
  int flags2;
  int xOffset;
  int yOffset;
  int width;
  int height;
  widget *lastWidget;
  widget *firstWidget;
  bitmap *bitmap;
};
#pragma pack(pop)

/*  180 */
#pragma pack(push, 1)
struct resource
{
  resourceVtable *vtable;
  RESOURCE_TYPE resourceType;
  __int16 referenceCount;
  unsigned int fileID;
  resource *next;
};
#pragma pack(pop)

/*  181 */
#pragma pack(push, 1)
struct font
{
  resourceVtable *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  int next;
  int lineHeight;
  int whetherFirstShortIsMoreThan13;
  int field_18;
  icon *icon;
};
#pragma pack(pop)

/*  182 */
#pragma pack(push, 1)
struct palette
{
  resourceVtable *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  int next;
  char *contents;
};
#pragma pack(pop)

/*  183 */
#pragma pack(push, 1)
struct icon
{
  resourceVtable *vtable;
  RESOURCE_TYPE resourceType;
  __int16 referenceCount;
  int fileID;
  resource *next;
  __int16 numSprites;
  IconEntry *headersAndImageData;
};
#pragma pack(pop)

/*  184 */
#pragma pack(push, 1)
struct AggregateHeader
{
  int id;
  int off;
  int length;
};
#pragma pack(pop)

/*  185 */

/*  186 */
#pragma pack(push, 1)
struct widgetVtable
{
  void (__thiscall *paint)(widget *);
  void (__thiscall *Close)(widget *, int);
  int (__thiscall *handleEvent)(widget *, tag_message *x);
};
#pragma pack(pop)

/*  187 */
#pragma pack(push, 1)
struct resourceManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  MANAGER_TYPE type;
  int idx;
  char name[30];
  int ready;
  resource *firstLoadedResource;
  int numOpenAGGFiles;
  int curHandleIdx;
  int fileDescriptors[2];
  AggregateHeader *aggContentInfo[2];
  int numberOfFilesInAGG[2];
  int expunging;
  int field_5E;
  char resourceToLoad[60];
  int fileID;
};
#pragma pack(pop)

/*  188 */

/*  189 */
#pragma pack(push, 1)
struct bitmap
{
  resourceVtable *vtable;
  RESOURCE_TYPE resourceType;
  __int16 referenceCount;
  int fileID;
  int next;
  __int16 setInConstructor;
  __int16 width;
  __int16 height;
  char *contents;
};
#pragma pack(pop)

/*  190 */
#pragma pack(push, 1)
struct resourceVtable
{
  int (__thiscall *scalarDeletingDestructor)(resource *this, char);
};
#pragma pack(pop)

/*  191 */
#pragma pack(push, 1)
struct IconEntry
{
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  char someSortOfLength;
  int off;
};
#pragma pack(pop)

/*  192 */

/*  193 */

/*  194 */

/*  195 */
#pragma pack(push, 1)
struct game
{
  __int16 field_0;
  char field_2;
  char field_3;
  char field_4;
  char _1[325];
  char lastSaveFile[251];
  char _11[125];
  char field_2C2;
  char field_2C3;
  char field_2C4;
  char field_2C5;
  char winConditionType;
  char field_2C7;
  char allowDefeatAllVictory;
  __int16 winConditionArgument;
  char _2[10];
  __int16 victoryCastleY;
  char _3[380];
  char playerHandicap[6];
  char field_459[6];
  char field_45F[6];
  char difficulty;
  char _5[40];
  char numPlayers;
  char couldBeNumDefeatedPlayers;
  char playerAlive[6];
  __int16 day;
  __int16 week;
  __int16 month;
  playerData players[6];
  fullMap map;
  char numObelisks;
  town castles[72];
  char _7[81];
  hero heroes[54];
  char relatedToHeroForHireStatus[54];
  char _8[1152];
  char artifaceGeneratedRandomly[103];
  boat boats[48];
  char boatBuilt[48];
  char obeliskVisitedMasks[48];
  char _10[652];
  int (__thiscall *callback)(tag_message *);
  __int16 field_660D;
};
#pragma pack(pop)

/*  196 */
#pragma pack(push, 1)
struct fullMap
{
  mapCell *tiles;
  mapCellExtra *cellExtras;
  int width;
  int height;
  int numCellExtras;
};
#pragma pack(pop)

/*  197 */
#pragma pack(push, 1)
struct hero
{
  __int16 spellpoints;
  char idx;
  char ownerIdx;
  char field_4;
  char field_5;
  char field_6;
  char field_7;
  char field_8;
  char field_9;
  char name[13];
  char factionID;
  char heroID;
  int x;
  int y;
  __int16 field_21;
  __int16 field_23;
  __int16 field_25;
  __int16 field_27;
  __int16 field_29;
  __int16 field_2B;
  __int16 occupiedObjType;
  __int16 occupiedObjVal;
  int remainingMobility;
  int mobility;
  int experience;
  __int16 oldLevel;
  char primarySkills[4];
  char field_43;
  char tempMoraleBonuses;
  char tempLuckBonuses;
  char _2[30];
  char wisdomLastOffered;
  armyGroup army;
  char secondarySkillLevel[14];
  char skillIndex[14];
  int numSecSkillsKnown;
  char spellsLearned[65];
  char artifacts[14];
  char flags1;
  char flags2;
  char flags3;
  char flags4;
  char isCaptain;
  int field_E8;
  char scrollSpell[14];
};
#pragma pack(pop)

/*  198 */
#pragma pack(push, 1)
struct armyGroup
{
  char creatureTypes[5];
  __int16 quantities[5];
};
#pragma pack(pop)

/*  199 */
#pragma pack(push, 1)
struct army
{
  char mightBeIsAttacking;
  char animatingRangedAttack;
  char mightBeAttackAnimIdx;
  char field_3;
  char field_4;
  char field_5;
  int field_6;
  H2RECT stackSizeDispBounds;
  H2RECT field_1A;
  H2RECT bounds;
  H2RECT effectAnimationBounds;
  int curFidget;
  float field_4E;
  int targetOwner;
  int targetStackIdx;
  int targetNeighborIdx;
  int field_5E;
  int targetHex;
  int probablyIsNeedDrawSpellEffect;
  int mirroredIdx;
  int mirrorIdx;
  int lifespan;
  int creatureIdx;
  int occupiedHex;
  int animationType;
  int animationFrame;
  int facingRight;
  int field_8A;
  int field_8E;
  int initialQuantity;
  int quantity;
  unsigned int previousQuantity;
  int temporaryQty;
  int damage;
  int armyIdx;
  int otherBadLuckThing;
  int speed;
  int field_B2;
  int luckStatus;
  tag_monsterInfo creature;
  __int16 field_D4;
  int damageTakenDuringSomeTimePeriod;
  int hasTakenLosses;
  int dead;
  int spellEnemyCreatureAbilityIsCasting;
  int owningSide;
  int stackIdx;
  int baseFidgetTime;
  int morale;
  int luck;
  int field_FA;
  int yDrawOffset;
  int xDrawOffset;
  int numActiveEffects;
  char effectStrengths[19];
  int field_11D;
  int hitByHydraAttack;
  void *field_125;
  SMonFrameInfo frameInfo;
  icon *creatureIcon;
  icon *missileIcon;
  sample *combatSounds[7];
};
#pragma pack(pop)

/*  200 */
#pragma pack(push, 1)
struct playerData
{
  char color;
  char numHeroes;
  char curHeroIdx;
  char field_3;
  char heroesOwned[8];
  char heroesForPurchase[2];
  char _2;
  int personality;
  char _3[45];
  char field_40;
  __int16 field_41;
  char field_43;
  char numCastles;
  __int16 field_45;
  char castlesOwned[72];
  int resources[7];
  char _4[111];
  char field_11A;
};
#pragma pack(pop)

/*  201 */
#pragma pack(push, 1)
struct town
{
  char idx;
  char ownerIdx;
  char alignment;
  char factionID;
  char x;
  char y;
  __int16 field_6;
  armyGroup garrison;
  char visitingHeroIdx;
  unsigned int buildingsBuiltFlags;
  char mageGuildLevel;
  char field_1D;
  __int16 numCreaturesInDwelling[12];
  char field_36;
  char mayNotBeUpgradedToCastle;
  char _2[4];
  char mageGuildSpells[5][4];
  char numSpellsOfLevel[5];
  __int16 field_55;
  char name[12];
  char field_63;
};
#pragma pack(pop)

/*  202 */
#pragma pack(push, 1)
struct baseManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
};
#pragma pack(pop)

/*  203 */
#pragma pack(push, 1)
struct combatManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  palette *palette;
  char _1[768];
  char combatMessageRow1[120];
  char combatMessageRow2[120];
  char field_42A[117];
  char field_49F[117];
  hexcell combatGrid[117];
  int terrainType;
  int combatFieldFringeID;
  int field_31E6;
  int field_31EA;
  int field_31EE;
  int combatFieldCoverID;
  icon *combatScreenIcons[15];
  icon *combatObjIcons[8];
  int numCombatObjs;
  __int16 eagleEyeSpellLearned[2];
  int drawBridgePosition;
  int hasMoat;
  char turretStatus[4];
  char wallStatus[4];
  char ballistaDestroyed;
  bitmap *couldBeBitmapForFieldItself;
  bitmap *probablyBitmapForCombatScreen;
  bitmap *bitmap1;
  int zeroedAfterAnimatingDeathAndHolySpells;
  int field_327B;
  town *castles[2];
  hero *heroes[2];
  hero captains;
  int heroSpellpowers[2];
  armyGroup *armies[2];
  int shadedHex;
  char field_339D[2];
  char field_339F[2];
  char field_33A1;
  char field_33A2;
  char field_33A3[2];
  int heroIconIdxRelated[2];
  int countRelatedToSpellAnimation[2];
  int heroType[2];
  int field_33BD[2];
  icon *heroIcon[2];
  icon *heroFlagIcon[2];
  int heroFlagIconIdx[2];
  H2RECT heroBounds[2];
  H2RECT heroFlagBounds[2];
  H2RECT moatPartBounds[9];
  int otherCombatMessageRelatedTime;
  int combatMessageRelatedTime;
  int couldBeShouldResetCombatMessage;
  char _7[100];
  char summonedCreatureType[2];
  int field_351F[2];
  int involvedInBadMorale[2];
  int playerID[2];
  int experienceForDefeating[2];
  int field_353F;
  int field_3543;
  int numCreatures[2];
  army creatures[2][21];
  int otherCurrentSideThing;
  int someSortOfStackIdx;
  int field_F2AB;
  int currentActionSide;
  int field_F2B3;
  int field_F2B7;
  int field_F2BB;
  int field_F2BF;
  int field_F2C3;
  int field_F2C7;
  int field_F2CB;
  int field_F2CF;
  H2RECT catapultBounds;
  H2RECT ballistaBounds;
  H2RECT drawbridgeBounds;
  H2RECT field_F303;
  int probablyCatapultImgIdx[2];
  char _11[8];
  int timesCatapultMustFire[2];
  int timesGarrisonMustFire[2];
  int isCastleBattle;
  char _12[20];
  int zeroedInHandleCatapult1;
  int zeroedInHandleCatapult2;
  float field_F353;
  int field_F357;
  int field_F35B;
  float ghostAndVampireAbilityStrength[2];
  heroWindow *window;
  int field_F36B;
  int field_F36F;
  int field_F373;
  int field_F377[2];
  signed int stuffHappenedToCreature[2][20];
  int field_F41F;
  int field_F423;
  int field_F427[2];
  int field_F42F;
  char _14[160];
  int sideCasualtiesTitleTextWidget[2];
  textWidget *battlefieldCasualtiesTextWidget;
  char _15[116];
  int field_F553;
  int field_F557;
  char _16[28];
  char shouldVanish[2][20];
  char anyStacksShouldVanish;
  char combatBackgroundFilename[13];
  char hexNeighbors[117][6];
  heroWindow *combatEndWindow;
  int current_spell_id;
  int winningSide;
};
#pragma pack(pop)

/*  204 */
#pragma pack(push, 1)
struct hexcell
{
  __int16 centerX;
  __int16 occupyingCreatureBottomY;
  __int16 leftX;
  __int16 topY;
  __int16 rightX;
  __int16 otherY1;
  __int16 otherY2;
  char isBlocked;
  char combatObjIdx;
  char unitOwner;
  signed __int8 stackIdx;
  char isOccupierNonPrimaryHex;
  int numCorpses;
  char corpseOwners[14];
  char corpseStackIndices[14];
  char field_33[14];
  char field_41;
  H2RECT drawingBounds;
  char field_52[16];
};
#pragma pack(pop)

/*  205 */
#pragma pack(push, 1)
struct tag_monsterInfo
{
  __int16 cost;
  int fight_value;
  char fight_value_aux;
  char growth;
  __int16 hp;
  char faction;
  char speed;
  char attack;
  char defense;
  char min_damage;
  char max_damage;
  char shots;
  char short_name[5];
  __int16 creature_flags;
  __int16 _;
};
#pragma pack(pop)

/*  206 */
#pragma pack(push, 1)
struct border
{
  widgetVtable *vtable;
  heroWindow *parentWindow;
  widget *nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 field_12;
  __int16 backgroundType;
  __int16 flagsRelatedToShouldDisplayAndPerhapsMouseCode;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  bitmap *bitmap;
  icon *icon;
  __int16 color;
};
#pragma pack(pop)

/*  207 */
#pragma pack(push, 1)
struct listBox
{
  int vtable;
  heroWindow *parentWindow;
  int nextInLinkedList;
  int prevInLinkedList;
  __int16 fieldID;
  __int16 componentIdx;
  __int16 field_14;
  __int16 field_16;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  int fontID;
  icon *icon;
  __int16 field_28;
  __int16 field_2A;
  __int16 field_2C;
  __int16 field_2E;
  __int16 field_30;
  __int16 field_32;
  __int16 field_34;
  __int16 field_36;
  __int16 field_38;
  __int16 field_3A;
  __int16 field_3C;
  __int16 field_3E;
  __int16 field_40;
  __int16 field_42;
  __int16 field_44[23];
  __int16 field_72[15];
};
#pragma pack(pop)

/*  208 */
#pragma pack(push, 1)
struct SSpellInfo
{
  char short_name[9];
  char level;
  char spriteIdx;
  char creatureEffectAnimationIdx;
  char appearingChance;
  char field_D;
  char cost;
  char field_F;
  char field_10;
  char field_11;
  char field_12;
  char field_13;
  char field_14;
  char attributes;
};
#pragma pack(pop)

/*  209 */
#pragma pack(push, 1)
struct inputManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  tag_message inputInstances[64];
  int currentInputEvt;
  int currentInfoField;
  int readingInputMutex;
  int field_742;
  int field_746;
  int field_74A;
  __int16 keycodeRelated[128];
  int field_84E;
  int field_852;
  int normalizingKeycodeRelated;
  int field_85A;
  int forSettingBitmask;
  int field_862;
  int field_866;
};
#pragma pack(pop)

/*  210 */
#pragma pack(push, 1)
struct mouseManager
{
  float vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  bitmap *bitmap;
  int spriteIdx;
  icon *cursorIcon;
  MOUSE_CURSOR_CATEGORY cursorCategory;
  int cursorIdx;
  int field_4A;
  int field_4E;
  int field_52;
  int field_56;
  int field_5A;
  int cursorTopLeftX;
  int cursorTopLeftY;
  int field_66;
  int field_6A;
  int field_6E;
  int field_72;
  int cursorWidth;
  int cursorHeight;
  int field_7E;
  int couldBeShowMouse;
  int cursorDisabled;
};
#pragma pack(pop)

/*  211 */
#pragma pack(push, 1)
struct tag_message
{
  INPUT_EVENT_CODE eventCode;
  int xCoordOrKeycode;
  int yCoordOrFieldID;
  int inputTypeBitmask;
  int altXCoord;
  int altYCoord;
  void *payload;
};
#pragma pack(pop)

/*  212 */
#pragma pack(push, 1)
struct heroWindowManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  heroWindow *firstWindow;
  heroWindow *lastWindow;
  heroWindow *topmostWindow;
  heroWindow *nextTopmostWindow;
  bitmap *screenBuffer;
  bitmap *fizzleSource;
  bitmap *field_4E;
  int numScreenshots;
  int cycleColors;
  int buttonPressedCode;
  int hoveredFieldID;
};
#pragma pack(pop)

/*  213 */

/*  214 */
#pragma pack(push, 1)
struct sample
{
  resourceVtable *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  resource *next;
  int field_10;
  void *contents;
  int nbytes;
  int codeThing;
  unsigned int playbackRate;
  unsigned int sampleType;
  unsigned int field_28;
  int loopCount;
};
#pragma pack(pop)

/*  215 */
#pragma pack(push, 1)
struct SMonFrameInfo
{
  char firstByteIgnored;
  __int16 offsetForBlind[2];
  char startMoveAnimInfoIgnored[16];
  char subStartMoveInfoIgnored[16];
  char mainMoveAnimInfoIgnored[16];
  char subEndMoveAnimInfoIgnored[16];
  char endMoveAnimInfoIgnored[16];
  char fullMoveAnimInfoIgnored[16];
  char moveAnimInfoIgnored[16];
  char numberOfFidgets;
  float fidgetProbabilities[5];
  int fidgetInfoIgnored[5];
  int maxFidgetDelay;
  int stepTime;
  int shootingTime;
  int flightSpeed;
  __int16 projectileStartOffset[3][2];
  char numMissileDirs;
  float projDirAngle[12];
  int stackNumDispXShift[2];
  char animationLengths[34];
  char animationFrameToImgIdx[34][16];
};
#pragma pack(pop)

/*  216 */
#pragma pack(push, 1)
struct MIDIWrap
{
  resourceVtable *vtable;
  __int16 resourceType;
  __int16 referenceCount;
  int fileID;
  resource *next;
  void *contents;
};
#pragma pack(pop)

/*  217 */
#pragma pack(push, 1)
struct executive
{
  baseManager *firstManager;
  baseManager *lastManager;
  baseManager *currentManager;
  _DWORD field_C;
};
#pragma pack(pop)

/*  218 */
#pragma pack(push, 1)
struct recruitUnit
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  int field_36;
  int creatureType;
  int field_3E;
  int field_42;
  int field_46;
  int field_4A;
  int field_4E;
  int field_52;
  int field_56;
  armyGroup *army;
  int field_5E;
  int field_62;
  int field_66;
  int available;
  int field_6E;
  int field_72;
  int field_76;
  int field_7A;
};
#pragma pack(pop)

/*  219 */
#pragma pack(push, 1)
struct searchArray
{
  int field_0;
  int field_4;
  int field_8;
  char _1[8];
  PathfindingInfo mainDataStructure[1024];
  PathfindingInfo *field_2414;
  int field_2418;
  int field_241C[63];
};
#pragma pack(pop)

/*  220 */
enum BRIDGE_STATUS
{
  BRIDGE_OPEN = 0x0,
  BRIDGE_CLOSING_1 = 0x1,
  BRIDGE_CLOSING_2 = 0x2,
  BRIDGE_DESTROYED = 0x3,
  BRIDGE_CLOSED = 0x4,
};

/*  221 */
#pragma pack(push, 1)
struct iconWidget
{
  widgetVtable *vtable;
  heroWindow *parentWindow;
  widget *nextInLinkedList;
  widget *prevInLinkedList;
  __int16 fieldID;
  __int16 componentIndex;
  __int16 field_14;
  __int16 field_16;
  __int16 offsetX;
  __int16 offsetY;
  __int16 width;
  __int16 height;
  icon *icon;
  __int16 imgIdx;
  char mirror;
  __int16 field_27;
  int iconFileID;
};
#pragma pack(pop)

/*  222 */
#pragma pack(push, 1)
struct townManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  town *castle;
  icon *couldBeBackground;
  BuildingDisplay *buildingDisplays[32];
  int curBuilding;
  int factionID;
  int field_C6;
  heroWindow *townScreen;
  strip *garrisonDisplay;
  strip *visitingArmyDisplay;
  strip *field_D6;
  int field_DA;
  strip *field_DE;
  int field_E2;
  strip *field_E6;
  int field_EA;
  bankBox *bankbox;
  char infoMessage[80];
  int field_142;
  int field_146;
  int field_14A;
  int field_14E;
  int field_152;
  int field_156;
  int field_15A;
  int field_15E;
  heroWindow *curScreen;
  heroWindow *dialog;
  int field_16A;
  int field_16E;
  int recruitHeroConfirmed;
  hero *heroBeingRecruited;
};
#pragma pack(pop)

/*  223 */
#pragma pack(push, 1)
struct strip
{
  heroWindow *window;
  char _1[24];
  int x;
  int y;
  int field_24;
  int drawBorder;
  void *field_2C[6];
  icon *stripIcon;
  icon *creaturePortraits[5];
  int creatureTypes[5];
  icon *portraitIcon;
  icon *portraitFlagIcon;
  int portraitIconIdx;
  int field_7C;
  armyGroup *army;
};
#pragma pack(pop)

/*  224 */
#pragma pack(push, 1)
struct bankBox
{
  playerData *player;
  __int16 x;
  __int16 y;
  heroWindow *window;
};
#pragma pack(pop)

/*  225 */
#pragma pack(push, 1)
struct advManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  int field_36;
  widget *someComponents[2][12];
  heroWindow *adventureScreen;
  int sizeOfSomethingMapRelated;
  int field_A2;
  int currentTerrain;
  int field_AA;
  fullMap *map;
  iconWidget *heroScrollbarKnob;
  iconWidget *castleScrollbarKnob;
  int field_BA;
  int field_BE;
  tileset *groundTileset;
  tileset *clofTileset;
  tileset *stonTileset;
  int field_CE[64];
  icon *radarIcon;
  icon *clopIcon;
  int viewX;
  int viewY;
  char _2[24];
  int field_1F6;
  int field_1FA;
  int field_1FE;
  int field_202;
  int field_206;
  int field_20A;
  int field_20E;
  int field_212;
  int field_216;
  void *heroIcons[6];
  icon *boatIcon;
  icon *frothIcon;
  icon *shadowIcon;
  icon *boatShadowIcon;
  void *flagIcons1[6];
  void *flagIcons2[6];
  int field_272;
  int field_276;
  int field_27A;
  int field_27E;
  int field_282;
  int field_286;
  int field_28A;
  int field_28E;
  char field_292[20];
  int field_2A6;
  int field_2AA;
  int field_2AE;
  int field_2B2;
  int field_2B6;
  int field_2BA;
  int field_2BE;
  int field_2C2[4][2];
  void *loopSamples[28];
  sample *walkSamples[9];
  int identifyCast;
  int field_37A;
};
#pragma pack(pop)

/*  226 */
#pragma pack(push, 1)
struct tileset
{
  resourceVtable *vtable;
  RESOURCE_TYPE resourceType;
  __int16 referenceCount;
  int fileID;
  resource *next;
  __int16 numTiles;
  __int16 field_12;
  __int16 field_14;
  void *contents;
};
#pragma pack(pop)

/*  227 */
#pragma pack(push, 1)
struct mapCell
{
  __int16 groundIndex;
  char bitfield_1_hasObject_1_isRoad_6_objTileset;
  __int8 objectIndex;
  unsigned __int16 field_4_1_1_isShadow_1_13_extraInfo;
  char field__1_hasOverlay_1_hasLateOverlay_6_overlayTileset;
  char overlayIndex;
  char displayFlags;
  char objType;
  __int16 extraIdx;
  int objLink;
  int ovrLink;
};
#pragma pack(pop)

/*  228 */
#pragma pack(push, 1)
struct SBuildingInfo
{
  char animationLength;
  __int16 x;
  __int16 y;
  __int16 width;
  __int16 height;
};
#pragma pack(pop)

/*  229 */
#pragma pack(push, 1)
struct SWinSetup
{
  WINDOW_IDS screenIdx;
  __int16 fieldID;
  char *label;
};
#pragma pack(pop)

/*  230 */
enum RESOURCEMGR_CONSTANTS
{
  NUM_AGG_FILES = 0x2,
  NUM_GOOD_EVIL_ICONS = 0x25,
};

/*  231 */
enum ARTIFACT_CONSTANTS
{
  NUM_BASE_ARTIFACTS = 0x51,
  NUM_EXPANSION_ARTIFACTS = 0x66,
};

/*  232 */
enum WIN_CONDITION_TYPES
{
  WIN_CONDITION_CAPTURE_CASTLE = 0x1,
  WIN_CONDITION_DEFEAT_HERO = 0x2,
  WIN_CONDITION_FIND_ARTIFACT = 0x3,
  WIN_CONDITION_DEFEAT_COLOR = 0x4,
  WIN_CONDITION_ACCUMULATE_GOLD = 0x5,
};

/*  233 */
enum RESOURCE_CONSTANTS
{
  NUM_RESOURCES = 0x7,
};

/*  234 */
enum SKILL_CONSTANTS
{
  MAX_SECONDARY_SKILL_LEVELS = 0x3,
  MAX_KNOWABLE_SECONDARY_SPILLS = 0x8,
};

/*  235 */
enum SPELL_CONSTANTS
{
  NUM_SPELLS = 0x41,
};

/*  236 */
enum MAP_CONSTANTS
{
  MAX_CASTLES = 0x48,
};

/*  237 */
#pragma pack(push, 1)
struct mapCellExtra
{
  __int16 nextIdx;
  char _1_animatedObject_7_objTileset;
  signed __int8 objectIndex;
  char field_4_1_1_1_isShadow_5;
  char _1_animatedLateOverlay_1_hasLateOverlay_6_lateOverlayTileset;
  char overlayIndex;
  int objLink;
  int ovrLink;
};
#pragma pack(pop)

/*  238 */
enum WINDOW_IDS : __int8
{
  COMBAT_SETTINGS_WINDOW = 0x1,
  ADVENTURE_SETTINGS_WINDOW = 0x2,
  HERO_VIEW_WINDOW = 0x6,
};

/*  239 */
enum GENERAL_GUI_FIELD_IDS
{
  FIELD_TOP_BANNER = 0x2,
  BUTTON_CANCEL = 0x7801,
  BUTTON_OK = 0x7802,
};

/*  240 */
#pragma pack(push, 1)
struct boat
{
  char idx;
  char x;
  char y;
  char field_3;
  char underlyingObjType;
  char field_5;
  char field_6;
  char owner;
};
#pragma pack(pop)

/*  242 */
#pragma pack(push, 1)
struct lineManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  icon *cursorOverlay;
  int field_3A;
  int field_3E;
};
#pragma pack(pop)

/*  243 */
enum TOOLSET
{
  TERRAIN_PLACEMENT = 0,
  OBJECT_PLACEMENT = 1,
  CELL_DETAILS = 2,
  RIVER_PLACEMENT = 3,
  ROAD_PLACEMENT = 4,
  ERASE_TOOL = 5,
};

/*  244 */
#pragma pack(push, 1)
struct terrainManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  int terrainChoice;
  iconWidget *selectionHighlight;
  widget *aWidget;
  void *terrainButtons[9];
  void *brushButtons[4];
  int brushX;
  int brushY;
};
#pragma pack(pop)

/*  245 */
#pragma pack(push, 1)
struct overlayManager
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  int field_36;
  icon *overlayTiles;
  icon *overlaySelectBoxes;
  overlay availOverlays[956];
  int nAvailOverlays;
  int field_1E5BE;
  int field_1E5C2;
  widget *selectionHighlight;
  textWidget *textWid;
  void *objTypeButtons[14];
  heroWindow *selectionWindow;
  widget *scrollBar;
  widget *slider;
  int field_1E612;
};
#pragma pack(pop)

/*  246 */
#pragma pack(push, 1)
struct fileRequester
{
  managerVtable *vtable;
  baseManager *next;
  baseManager *prev;
  int type;
  int idx;
  char name[30];
  int ready;
  int field_36;
  int left;
  int top;
  int field_42;
  char _1[600];
  int field_29E;
  int field_2A2;
  int field_2A6;
  char _2[360];
  int field_412;
  int field_416;
  int field_41A;
  int field_41E;
  int field_422;
  int field_426;
  int field_42A;
};
#pragma pack(pop)

/*  247 */
#pragma pack(push, 1)
struct SMapHeader
{
  int field_0;
  __int16 field_4;
  char width;
  char height;
  char hasPlayer[6];
  char playerMayBeHuman[6];
  char playerMayBeComp[6];
  char numPlayers;
  char minHumans;
  char maxHumans;
  char winConditionType;
  char field_1E;
  char allowDefeatAllVictory;
  __int16 winConditionArgument;
  char field_22;
  char field_23;
  char field_24;
  char noStartingHeroInCastle;
  char playerFactions[6];
  __int16 field_2C;
  int field_2E;
  int field_32;
  char field_36;
  char field_37;
  char nextTownName;
  char field_39;
  char name[60];
  char description[298];
  char field_1A0;
  char field_1A1;
  char numRumors;
  char numEvents;
};
#pragma pack(pop)

/*  248 */
#pragma pack(push, 1)
struct TownExtra
{
  char color;
  char customBuildings;
  int buildingsBuilt;
  char mageGuildLevel;
  char customGarrison;
  armyGroup garrison;
  char hasCaptain;
  char customName;
  char name[13];
  char faction;
  char isCastle;
  char disallowCastle;
  char _[25];
  char field_42;
  char field_43;
  char field_44;
  char field_45;
};
#pragma pack(pop)

/*  249 */
#pragma pack(push, 1)
struct overlay
{
  int idx;
  int idx2;
  int ordinal;
  OBJ_TILESET tileset;
  OVERLAY_CATEGORY category;
  __int16 field_E;
  char iconIdxGap;
  __int64 intersectsTileMask;
  int terrainObjCategoryMask;
  int allowedTerrainPlacementMask;
  __int64 coveredNonObstructedMask;
  __int64 shadowsMask;
  __int64 animatedOverlay;
  __int64 field_39;
  char townColorOrMineColor;
  char field_42;
  __int64 interactionPointMask;
  char field_4B;
  ADVENTURE_MAP_LOCATION locationType;
  char field_4D;
  int field_4E;
  char fullGridIconIndices[48];
};
#pragma pack(pop)

/*  250 */
enum OVERLAY_CATEGORY : __int8
{
  OVERLAY_CATEGORY_TERRAIN = 0,
  OVERLAY_CATEGORY_TREASURE = 1,
  OVERLAY_CATEGORY_CREATURE = 2,
  OVERLAY_CATEGORY_ARTIFACT = 3,
  OVERLAY_CATEGORY_TOWN = 5,
  OVERLAY_CATEGORY_HERO = 7,
};

/*  251 */
enum TERRAIN_BMASK2 : __int32
{
  MASK_TERRAIN_WATER = 1,
  MASK_TERRAIN_GRASS = 2,
  MASK_TERRAIN_SNOW = 4,
  MASK_TERRAIN_SWAMP = 8,
  MASK_TERRAIN_LAVA = 16,
  MASK_TERRAIN_DESERT = 32,
  MASK_TERRAIN_DIRT = 64,
  MASK_TERRAIN_WASTELAND = 128,
  MASK_TERRAIN_BEACH = 256,
};

/*  252 */
enum OBJ_TILESET : __int8
{
  TILESET_HAUNTED = 10,
  TILESET_ARTIFACT = 11,
  TILESET_MONSTER = 12,
  TILESET_ARTIFACT_TAKEN = 13,
  TILESET_FLAG = 14,
  TILESET_RESOURCE_DISPLAY = 15,
  TILESET_HOURGLASS = 16,
  TILESET_ROUTE = 17,
  TILESET_STONBACK = 19,
  TILESET_MONSTER_ANIMATION = 20,
  TILESET_HERO = 21,
  TILESET_SNOW_MOUNTAIN = 22,
  TILESET_SWAMP_MOUNTAIN = 23,
  TILESET_LAVA_MOUNTAIN = 24,
  TILESET_DESERT_MOUNTAIN = 25,
  TILESET_DIRT_MOUNTAIN = 26,
  TILESET_MOUNTAIN_MULTIPLE = 27,
  TILESET_EXTRA_OVERLAY = 29,
  TILESET_ROAD = 30,
  TILESET_MOUNTAIN_CRACKED = 31,
  TILESET_MOUNTAIN_GRASS = 32,
  TILESET_TREE_JUNGLE = 33,
  TILESET_TREE_EVIL = 34,
  TILESET_OBJ_TOWN = 35,
  TILESET_TOWN_TERRAIN = 36,
  TILESET_TOWN_SHADOW = 37,
  TILESET_TOWN_RANDOM = 38,
  TILESET_OBJECT_EXTRA = 39,
  TILESET_OBJECT_WATER_2 = 40,
  TILESET_OBJECT_MULTIPLE_2 = 41,
  TILESET_OBJECT_TREE_SNOW = 42,
  TILESET_OBJECT_TREE_FIR = 43,
  TILESET_OBJECT_TREE_FALL = 44,
  TILESET_OBJECT_STREAM = 45,
  TILESET_OBJECT_RESOURCE = 46,
  TILESET_OBJECT_DUMMY = 47,
  TILESET_OBJECT_GRASS_2 = 48,
  TILESET_OBJECT_TREE_DECIDUOUS = 49,
  TILESET_OBJECT_WATER = 50,
  TILESET_OBJECT_GRASS = 51,
  TILESET_OBJECT_SNOW = 52,
  TILESET_OBJECT_SWAMP = 53,
  TILESET_OBJECT_LAVA = 54,
  TILESET_OBJECT_DESERT = 55,
  TILESET_OBJECT_DIRT = 56,
  TILESET_OBJECT_CRACKED = 57,
  TILESET_OBJECT_LAVA_3 = 58,
  TILESET_OBJECT_MULTIPLE = 59,
  TILESET_OBJECT_LAVA_2 = 60,
  TILESET_OBJECT_EXPANSION_1 = 61,
  TILESET_OBJECT_EXPANSION_2 = 62,
  TILESET_OBJECT_EXPANSION_3 = 63,
};

/*  253 */
enum OVERLAY_CONSTANTS
{
  NUM_OVERLAYS = 956,
};

/*  254 */
#pragma pack(push, 1)
struct HeroExtra
{
  char owner;
  char field_1;
  armyGroup army;
  char field_11;
  char field_12;
  char artifacts[3];
  char field_16;
  char field_17;
  char field_18;
  char field_19;
  char field_1A;
  char field_1B;
  char secondarySkills[8];
  char firstSecondarySkillLevel;
  char secondSecondarySkillLevel;
  char field_26;
  char field_27;
  char field_28[20];
  char field_3C;
  char field_3D;
  char field_3E;
  char field_3F;
  char field_40;
  char field_41;
  char field_42;
  char field_43;
  char field_44;
  char field_45;
  char field_46;
  char field_47;
  char field_48;
  char field_49;
  char field_4A;
  char field_4B;
};
#pragma pack(pop)

/*  256 */
#pragma pack(push, 1)
struct SphinxExtra
{
  char unclaimed;
  int resourceReward[7];
  __int16 artifactReward;
  unsigned __int8 numAnswers;
  char answers[8][13];
  char riddle;
};
#pragma pack(pop)

/*  257 */
#pragma pack(push, 1)
struct EventExtra
{
  char field_0;
  int resourceReward[7];
  __int16 artifactReward;
  char field_1F;
  char cancelAfterFirstVisit;
  char field_21;
  char field_22;
  char field_23;
  char field_24;
  char unclaimed;
  __int16 x;
  __int16 y;
  char field_2A;
  char colorCanSee[6];
  char message;
};
#pragma pack(pop)

/*  258 */
#pragma pack(push, 1)
struct SignExtra
{
  char field_0;
  int field_1;
  int field_5;
  char message;
};
#pragma pack(pop)


/* End of file */
